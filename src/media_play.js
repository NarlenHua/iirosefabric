(function() {
    const xcbsInstance = Ext.Service.getInstance("XCBS");
    const userUid = Cookie('uid')

    function calculateSHA256(text) {
        return new Promise((resolve, reject) => {
            // 创建一个新的文本编码器
            var encoder = new TextEncoder();

            // 将文本编码为字节数组
            var data = encoder.encode(text);

            // 使用 Web Cryptography API 计算 SHA256 哈希
            crypto.subtle.digest('SHA-256', data).then(function(hash) {
                // 将哈希值转换为十六进制字符串
                var hexHash = Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join('');
                resolve(hexHash); // 返回 SHA256 哈希值
            }).catch(function(err) {
                reject(err); // 处理错误
            });
        });
    }

    class API {
        static send(msg, cut_msg) {
            let msg_json = {
                "m": msg.toString(),
                "mc": inputcolorhex,
                "i": Math.random().toString().slice(2, 14)
            };
            if (cut_msg !== undefined) {
                switch (cut_msg) {
                    case 0:
                        socket.send("{0" + JSON.stringify(msg_json))
                        break
                    case 1:
                        socket.send('{1' + JSON.stringify(msg_json))
                        break
                }
                return
            }
            socket.send(JSON.stringify(msg_json))
        }
    }

    callAPI();
    if (localStorage.getItem('xc-helpwindows') !== "v1.0.0") {
        Utils.sync(0,'媒体解析工具箱加载成功！\n电脑端：ALT+Q\n手机端：双指下滑\nTips: 各平台解析地址都不会失效！\n歌单解析发送 停 停止 或 STOP 即可停止解析当前歌单。\n\n开启云同步后您的部分数据将会由云端合并，同步，管理，存储。\n开启相关功能则视为您同意将部分数据提交至云端');
        localStorage.setItem('xc-helpwindows', "v1.0.0");
    }
    let historyPlays;
    if (localStorage.getItem('xc-historyPlays') !== null) {
        historyPlays =JSON.parse(localStorage.getItem('xc-historyPlays'))
    } else {
        historyPlays = []
    }
    // 创建窗口和样式
    const style = document.createElement('style');
    const windowHtml = `
        <div id="XcToolsWindow" class="xctools-window" style="display: none;">
            <!--# 未闻花名，但识花香，已知花名，花已不在。未闻花名，但识花香，再遇花时，泪已千行， 人犹在时，未闻花名，已知花名，人去花谢， 已知花意，未闻其花，以见其花，未闻花名。再见其花，泪落千冥， 我们仍未知道那天所看见的花的名字 #-->
            <div id="settingsMenu" class="settings-menu" style="display: none;">
                <div class="settings-content" style="padding: 10px;">
                    <h3>设置</h3>
                    <div>点播选项:</div>
                    <input type="checkbox" id="media_card">
                    <label for="media_card">隐式点播</label>
                    
                    <div>歌词内容:</div>
                    <input type="radio" id="lryType0" name="lryType" value="0" checked><label for="lryType0">中外对照</label>
                    <input type="radio" id="lryType1" name="lryType" value="1"><label for="lryType1">原始语言</label>
                    <input type="radio" id="lryType2" name="lryType" value="2"><label for="lryType2">中文翻译</label>
                    <input type="radio" id="lryType3" name="lryType" value="3"><label for="lryType3">关闭歌词</label>
                    
                    <div>云同步:</div>
                    <input type="checkbox" id="syncNeteaseFavorites">
                    <label for="syncNeteaseFavorites">网易云收藏云同步</label>
                    <input type="checkbox" id="syncQQFavorites">
                    <label for="syncQQFavorites">QQ收藏云同步</label>
                    
                    <div>实验性内容:</div>
                    
                    <input type="checkbox" id="bilibili_dash">
                    <label for="bilibili_dash">b站音视分离媒体点播(1080P)</label>
                    <input type="checkbox" id="image_average_color">
                    <label for="image_average_color">图片平均色获取图片加载走接口</label>
                </div>
            </div>
            <div id="header" class="header">
                <span class="close-btn">
                    <svg t="1709464399902" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8163" width="20" height="20"><path d="M0 0h1024v1024H0z" fill="#ffffff" fill-opacity="0" p-id="8164"></path><path d="M240.448 168l2.346667 2.154667 289.92 289.941333 279.253333-279.253333a42.666667 42.666667 0 0 1 62.506667 58.026666l-2.133334 2.346667-279.296 279.210667 279.274667 279.253333a42.666667 42.666667 0 0 1-58.005333 62.528l-2.346667-2.176-279.253333-279.253333-289.92 289.962666a42.666667 42.666667 0 0 1-62.506667-58.005333l2.154667-2.346667 289.941333-289.962666-289.92-289.92a42.666667 42.666667 0 0 1 57.984-62.506667z" fill="#ffffff" p-id="8165"></path></svg>
                </span>
                <span class="settings-btn">
                    <svg t="1709463015392" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6955" width="20" height="20"><path d="M866.816 430.08h-66.048a290.304 290.304 0 0 0-27.648-66.048l46.08-47.616a54.784 54.784 0 0 0 0-77.824l-38.912-38.912a54.272 54.272 0 0 0-77.312 0l-48.64 48.64a296.448 296.448 0 0 0-61.952-25.088V157.184A54.784 54.784 0 0 0 539.136 102.4H484.864A54.784 54.784 0 0 0 430.08 157.184v66.048a307.2 307.2 0 0 0-64 26.112l-51.2-51.2a54.784 54.784 0 0 0-77.824 0l-38.912 38.912a54.784 54.784 0 0 0 0 77.824l51.2 51.2a307.2 307.2 0 0 0-26.112 64H157.184A54.784 54.784 0 0 0 102.4 484.864v54.272a54.784 54.784 0 0 0 54.784 54.784h66.048a296.448 296.448 0 0 0 25.088 61.952l-48.64 48.64a54.272 54.272 0 0 0 0 77.312l38.912 38.912a54.784 54.784 0 0 0 77.824 0l47.616-47.616a290.304 290.304 0 0 0 66.048 27.648v66.048A54.784 54.784 0 0 0 484.864 921.6h54.272a54.784 54.784 0 0 0 54.784-54.784v-66.048a307.2 307.2 0 0 0 64-26.112l46.592 46.08a54.272 54.272 0 0 0 77.312 0l38.912-38.912a54.272 54.272 0 0 0 0-77.312l-46.08-46.592a307.2 307.2 0 0 0 26.112-64h66.048A54.784 54.784 0 0 0 921.6 539.136V484.864a54.784 54.784 0 0 0-54.784-54.784zM512 716.8a204.8 204.8 0 1 1 204.8-204.8 204.8 204.8 0 0 1-204.8 204.8z" fill="#ffffff" p-id="6956"></path></svg>
                </span>
                <span class="share-btn">
                    <svg t="1710338745262" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4531" width="20" height="20"><path d="M640 682.666667v213.333333l384-429.312L640 42.666667v213.333333C39.722667 329.002667-185.514667 900.565333 187.477333 980.522667 25.173333 855.253333 326.186667 663.04 640 682.666667z" p-id="4532" fill="#ffffff"></path></svg>
                </span>
                
                <span class="cut-btn" style="height: 25px;width: 45px;background-color: #2c2c2c;position:absolute;right: 55px;bottom: -1px;cursor: pointer;">
                    <p align="center" style="margin-top: 3px;">cut</p>
                </span>
                <span class="cutAll-btn" style="height: 25px;width: 45px;background-color: #2c2c2c;position:absolute;right: 5px;bottom: -1px;cursor: pointer;">
                    <p align="center" style="margin-top: 3px;">cut all</p>
                </span>
                <span class="adminCut-btn" style="height: 25px;width: 90px;background-color: #2c2c2c;position:absolute;right: 200px;bottom: -1px;cursor: pointer;display: none">
                    <p align="center" style="margin-top: 3px;">切掉当前媒体</p>
                </span>
                <span class="adminCutAll-btn" style="height: 25px;width: 90px;background-color: #2c2c2c;position:absolute;right: 105px;bottom: -1px;cursor: pointer;display: none">
                    <p align="center" style="margin-top: 3px;">清空所有媒体</p>
                </span>
                
                <h3>媒体解析工具箱</h3>
                <span id="onlineCount">在线人数: 获取中</span>
                <div id="XCBSignal">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" data-darkreader-inline-fill="" style="--darkreader-inline-fill: currentColor;top: 14px;position: absolute;left: 130px;" height="20" width="20"><path d="M4 2H2v2h2v2H2v2h2V6h2v2h2V6H6V4h2V2H6v2H4V2Zm12 2v16h6V4h-6Zm2 2h2v12h-2V6Zm-9 4v10h6V10H9Zm2 8v-6h2v6h-2Zm-3-4v6H2v-6h6Zm-2 4v-2H4v2h2Z"></path></svg>                
                </div>
            </div>
            <div id="taba" class="tab">
                <button class="tabalinks active">网易云音乐</button>
                <button class="tabalinks">QQ音乐</button>
                <button class="tabalinks">哔哩哔哩</button>
                <button class="tabalinks">历史记录</button>
                <button class="tabalinks">投喂</button>
            </div>
            
            <div id="netease-div" class="tabcontenta" style="display: block;">
                <div id="tab" class="tab">
                    <button class="tablinks active">搜索</button>
                    <button class="tablinks">热歌</button>
                    <button class="tablinks">收藏</button>
                </div>
                
                <div id="search" class="tabcontent" style="display: block;">
                    <div id="songTab" class="tab" style="top: 150px;">
                        <button class="songtablinks active">歌曲</button>
                        <button class="songtablinks">歌单</button>
                        <button class="songtablinks">专辑</button>
                        <button class="songtablinks">电台</button>
                        <button class="songtablinks">歌手</button>
                    </div>
                    
                    <div id="songTabSong" class="songtabcontent" style="display: block" ">
                        <div id="search-section" class="search-section search-section-song" style="background-color: #2c2c2c;display: flex;">
                            <input type="text" id="songSearchInput" placeholder="搜索歌曲..." style="flex-grow: 1; margin-right: 5px;">
                            <button id="searchBtn">
                                <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                            </button>
                        </div>
                        <div class="content">
                            <ul id="searchSongResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                    </div>
                    
                    <div id="songTabSongList" class="songtabcontent" style="display: none">
                        <div id="search-section-song-list" class="search-section" style="background-color: #2c2c2c;display: flex;">
                            <button class="searchBtn" id="backSongListBtn" style="margin-right: 5px; display: none">
                                <svg t="1710397079213" style="margin-top: 3px;" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10797" width="16" height="16"><path d="M700.371228 394.525472 174.028569 394.525472l255.952416-227.506551c12.389168-11.011798 13.505595-29.980825 2.492774-42.369993-11.011798-12.386098-29.977755-13.506619-42.367947-2.492774L76.425623 400.975371c-6.960529 5.496178-11.434423 14.003945-11.434423 23.561625 0 0.013303 0.001023 0.026606 0.001023 0.039909 0 0.01228-0.001023 0.025583-0.001023 0.037862 0 0.473791 0.01535 0.946558 0.037862 1.418302 0.001023 0.016373 0.001023 0.032746 0.001023 0.049119 0.39295 8.030907 3.992941 15.595186 10.034541 20.962427l315.040163 280.028764c5.717212 5.083785 12.83533 7.580652 19.925818 7.580652 8.274454 0 16.514115-3.403516 22.442128-10.07445 11.011798-12.387122 9.896394-31.357172-2.492774-42.367947l-256.128425-227.665163 526.518668 0c109.219517 0 198.075241 88.855724 198.075241 198.075241s-88.855724 198.075241-198.075241 198.075241L354.324888 850.696955c-16.57449 0-30.011524 13.437034-30.011524 30.011524s13.437034 30.011524 30.011524 30.011524l346.046341 0c142.31631 0 258.098289-115.783003 258.098289-258.098289S842.686515 394.525472 700.371228 394.525472z" fill="#ffffff" p-id="10798"></path></svg>
                            </button>
                            <input type="text" id="songListSearchInput" placeholder="搜索歌单..." style="flex-grow: 1; margin-right: 5px;">
                            <button id="searchSongListBtn">
                                <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                            </button>
                        </div>
                        <div id="songList" class="content">
                            <ul id="searchSongListResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                        <div id="songListShow" class="content" style="display: none">
                            <ul id="searchSongListShowResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                    </div>
                    
                    <div id="songTabAlbum" class="songtabcontent" style="display: none">
                        <div id="search-section-album" class="search-section" style="background-color: #2c2c2c;display: flex;">
                            <button class="searchBtn" id="backSongAlbumBtn" style="margin-right: 5px; display: none">
                                <svg t="1710397079213" style="margin-top: 3px;" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10797" width="16" height="16"><path d="M700.371228 394.525472 174.028569 394.525472l255.952416-227.506551c12.389168-11.011798 13.505595-29.980825 2.492774-42.369993-11.011798-12.386098-29.977755-13.506619-42.367947-2.492774L76.425623 400.975371c-6.960529 5.496178-11.434423 14.003945-11.434423 23.561625 0 0.013303 0.001023 0.026606 0.001023 0.039909 0 0.01228-0.001023 0.025583-0.001023 0.037862 0 0.473791 0.01535 0.946558 0.037862 1.418302 0.001023 0.016373 0.001023 0.032746 0.001023 0.049119 0.39295 8.030907 3.992941 15.595186 10.034541 20.962427l315.040163 280.028764c5.717212 5.083785 12.83533 7.580652 19.925818 7.580652 8.274454 0 16.514115-3.403516 22.442128-10.07445 11.011798-12.387122 9.896394-31.357172-2.492774-42.367947l-256.128425-227.665163 526.518668 0c109.219517 0 198.075241 88.855724 198.075241 198.075241s-88.855724 198.075241-198.075241 198.075241L354.324888 850.696955c-16.57449 0-30.011524 13.437034-30.011524 30.011524s13.437034 30.011524 30.011524 30.011524l346.046341 0c142.31631 0 258.098289-115.783003 258.098289-258.098289S842.686515 394.525472 700.371228 394.525472z" fill="#ffffff" p-id="10798"></path></svg>
                            </button>
                            <input type="text" id="songAlbumSearchInput" placeholder="搜索专辑..." style="flex-grow: 1; margin-right: 5px;">
                            <button id="searchAlbumBtn">
                                <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                            </button>
                        </div>
                        <div id="songAlbum" class="content">
                            <ul id="searchAlbumResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                        <div id="songAlbumShow" class="content" style="display: none">
                            <ul id="searchAlbumShowResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                    </div>
                    
                    <div id="songTabRadio" class="songtabcontent" style="display: none">
                        <div id="search-section-radio" class="search-section" style="background-color: #2c2c2c;display: flex;">
                            <button class="searchBtn" id="backSongRadioBtn" style="margin-right: 5px; display: none">
                                <svg t="1710397079213" style="margin-top: 3px;" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10797" width="16" height="16"><path d="M700.371228 394.525472 174.028569 394.525472l255.952416-227.506551c12.389168-11.011798 13.505595-29.980825 2.492774-42.369993-11.011798-12.386098-29.977755-13.506619-42.367947-2.492774L76.425623 400.975371c-6.960529 5.496178-11.434423 14.003945-11.434423 23.561625 0 0.013303 0.001023 0.026606 0.001023 0.039909 0 0.01228-0.001023 0.025583-0.001023 0.037862 0 0.473791 0.01535 0.946558 0.037862 1.418302 0.001023 0.016373 0.001023 0.032746 0.001023 0.049119 0.39295 8.030907 3.992941 15.595186 10.034541 20.962427l315.040163 280.028764c5.717212 5.083785 12.83533 7.580652 19.925818 7.580652 8.274454 0 16.514115-3.403516 22.442128-10.07445 11.011798-12.387122 9.896394-31.357172-2.492774-42.367947l-256.128425-227.665163 526.518668 0c109.219517 0 198.075241 88.855724 198.075241 198.075241s-88.855724 198.075241-198.075241 198.075241L354.324888 850.696955c-16.57449 0-30.011524 13.437034-30.011524 30.011524s13.437034 30.011524 30.011524 30.011524l346.046341 0c142.31631 0 258.098289-115.783003 258.098289-258.098289S842.686515 394.525472 700.371228 394.525472z" fill="#ffffff" p-id="10798"></path></svg>
                            </button>
                            <input type="text" id="songRadioSearchInput" placeholder="搜索电台..." style="flex-grow: 1; margin-right: 5px;">
                            <button id="searchRadioBtn">
                                <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                            </button>
                        </div>
                        <div id="songRadio" class="content">
                            <ul id="searchRadioResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                        <div id="songRadioShow" class="content" style="display: none">
                            <ul id="searchRadioShowResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                    </div>
                    
                    <div id="songTabArtist" class="songtabcontent" style="display: none">
                        <div id="search-section-artist" class="search-section" style="background-color: #2c2c2c;display: flex;">
                            <button class="searchBtn" id="backSongArtistBtn" style="margin-right: 5px; display: none">
                                <svg t="1710397079213" style="margin-top: 3px;" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10797" width="16" height="16"><path d="M700.371228 394.525472 174.028569 394.525472l255.952416-227.506551c12.389168-11.011798 13.505595-29.980825 2.492774-42.369993-11.011798-12.386098-29.977755-13.506619-42.367947-2.492774L76.425623 400.975371c-6.960529 5.496178-11.434423 14.003945-11.434423 23.561625 0 0.013303 0.001023 0.026606 0.001023 0.039909 0 0.01228-0.001023 0.025583-0.001023 0.037862 0 0.473791 0.01535 0.946558 0.037862 1.418302 0.001023 0.016373 0.001023 0.032746 0.001023 0.049119 0.39295 8.030907 3.992941 15.595186 10.034541 20.962427l315.040163 280.028764c5.717212 5.083785 12.83533 7.580652 19.925818 7.580652 8.274454 0 16.514115-3.403516 22.442128-10.07445 11.011798-12.387122 9.896394-31.357172-2.492774-42.367947l-256.128425-227.665163 526.518668 0c109.219517 0 198.075241 88.855724 198.075241 198.075241s-88.855724 198.075241-198.075241 198.075241L354.324888 850.696955c-16.57449 0-30.011524 13.437034-30.011524 30.011524s13.437034 30.011524 30.011524 30.011524l346.046341 0c142.31631 0 258.098289-115.783003 258.098289-258.098289S842.686515 394.525472 700.371228 394.525472z" fill="#ffffff" p-id="10798"></path></svg>
                            </button>
                            <input type="text" id="songArtistSearchInput" placeholder="搜索歌手..." style="flex-grow: 1; margin-right: 5px;">
                            <button id="searchArtistBtn">
                                <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                            </button>
                        </div>
                        <div id="songArtist" class="content">
                            <ul id="searchArtistResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                        <div id="songArtistShow" class="content" style="display: none">
                            <ul id="searchArtistShowResults" style="background-color: #2c2c2c;"></ul>
                        </div>
                    </div>
                </div>
                
                <div id="favorites" class="tabcontent" style="background-color: #2c2c2c;display: none">
                    <div class="content">
                        <ul id="favoriteListSong" style="background-color: #2c2c2c;"></ul>
                    </div>
                </div>
                
                <div id="top" class="tabcontent" style="background-color: #2c2c2c;display: none">
                    <div class="content">
                        <ul id="topListSong" style="background-color: #2c2c2c;"></ul>
                    </div>
                </div>
            </div>
            
            <div id="qq-div" class="tabcontenta" style="display: none;">
                <div id="qqtab" class="tab">
                    <button class="qqtablinks active">搜索</button>
                    <button class="qqtablinks">热歌</button>
                    <button class="qqtablinks">收藏</button>
                </div>
                
                <div id="songQQSearch" class="songqqtabcontent">
                    <div id="search-section-qq" class="search-section" style="background-color: #2c2c2c;display: flex;">
                        <input type="text" id="songQQSearchInput" placeholder="搜索歌曲..." style="flex-grow: 1; margin-right: 5px;">
                        <button id="searchQQBtn">
                            <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                        </button>
                    </div>
                    <div id="songQQ" class="content">
                        <ul id="searchQQResults" style="background-color: #2c2c2c;"></ul>
                    </div>
                </div>
                
                <div id="QQtop" class="songqqtabcontent" style="background-color: #2c2c2c;display: none">
                    <div class="content">
                        <ul id="QQtopListSong" style="background-color: #2c2c2c;"></ul>
                    </div>
                </div>
                
                <div id="QQfavorites" class="songqqtabcontent" style="background-color: #2c2c2c;">
                    <div class="content">
                        <ul id="favoriteQQListSong" style="background-color: #2c2c2c;"></ul>
                    </div>
                </div>
            </div>
            
            <div id="bilibili-div" class="tabcontenta" style="display: none;">
                <div id="search-bilibili-section" class="search-section" style="background-color: #2c2c2c;display: flex;">
                    <button class="searchBtn" id="backBilibiliBtn" style="margin-right: 5px; display: none">
                        <svg t="1710397079213" style="margin-top: 3px;" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10797" width="16" height="16"><path d="M700.371228 394.525472 174.028569 394.525472l255.952416-227.506551c12.389168-11.011798 13.505595-29.980825 2.492774-42.369993-11.011798-12.386098-29.977755-13.506619-42.367947-2.492774L76.425623 400.975371c-6.960529 5.496178-11.434423 14.003945-11.434423 23.561625 0 0.013303 0.001023 0.026606 0.001023 0.039909 0 0.01228-0.001023 0.025583-0.001023 0.037862 0 0.473791 0.01535 0.946558 0.037862 1.418302 0.001023 0.016373 0.001023 0.032746 0.001023 0.049119 0.39295 8.030907 3.992941 15.595186 10.034541 20.962427l315.040163 280.028764c5.717212 5.083785 12.83533 7.580652 19.925818 7.580652 8.274454 0 16.514115-3.403516 22.442128-10.07445 11.011798-12.387122 9.896394-31.357172-2.492774-42.367947l-256.128425-227.665163 526.518668 0c109.219517 0 198.075241 88.855724 198.075241 198.075241s-88.855724 198.075241-198.075241 198.075241L354.324888 850.696955c-16.57449 0-30.011524 13.437034-30.011524 30.011524s13.437034 30.011524 30.011524 30.011524l346.046341 0c142.31631 0 258.098289-115.783003 258.098289-258.098289S842.686515 394.525472 700.371228 394.525472z" fill="#ffffff" p-id="10798"></path></svg>
                    </button>
                    <input type="text" id="songBilibiliSearchInput" placeholder="搜索视频..." style="flex-grow: 1; margin-right: 5px;">
                    <button class="searchBtn" id="searchBilibiliBtn">
                        <svg style="margin-top: 4px;" t="1709459550693" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4668" width="16" height="16"><path d="M912.072815 946.738335c-4.78498 0-9.56996-1.824555-13.220093-5.475711L650.662083 693.076078c-0.285502-0.285502-0.561795-0.579191-0.827855-0.883113l-6.979972-7.948019c-6.671956-7.594979-6.096858-19.11843 1.297552-26.012444 32.130791-29.958312 57.424874-65.413825 75.181283-105.379049 18.374486-41.35692 27.691689-85.472674 27.691689-131.122363 0-86.355787-33.628912-167.542854-94.691639-228.604558-61.062727-61.062727-142.249795-94.691639-228.604558-94.691639s-167.541831 33.628912-228.604558 94.691639c-61.062727 61.062727-94.691639 142.249795-94.691639 228.604558s33.628912 167.542854 94.691639 228.604558c61.062727 61.062727 142.249795 94.691639 228.604558 94.691639 26.15059 0 52.16508-3.130294 77.326133-9.301853 5.090948-1.353834 73.4038-19.189038 120.842229-14.809287 10.282181 0.948605 17.847483 10.05296 16.899902 20.335141s-10.047844 17.853623-20.335141 16.899902c-41.659819-3.845585-107.272165 13.571087-107.930151 13.747095-0.125867 0.033769-0.251733 0.065492-0.3776 0.097214-28.132734 6.91755-57.20998 10.425444-86.425372 10.425444-48.684816 0-95.922676-9.538237-140.402727-28.352745-42.953278-18.166755-81.523735-44.172035-114.644063-77.290317-33.119305-33.119305-59.123562-71.691809-77.29134-114.644063-18.813484-44.479027-28.352745-91.716888-28.352745-140.401704s9.53926-95.922676 28.352745-140.402727c18.167778-42.953278 44.172035-81.524758 77.29134-114.644063 33.119305-33.119305 71.690786-59.123562 114.644063-77.29134 44.480051-18.813484 91.717911-28.352745 140.402727-28.352745s95.922676 9.53926 140.401704 28.352745c42.953278 18.167778 81.524758 44.173059 114.644063 77.29134 33.118282 33.119305 59.123562 71.690786 77.29134 114.644063 18.813484 44.480051 28.351722 91.717911 28.351722 140.402727 0 50.912553-10.399861 100.136651-30.91101 146.305157-17.285688 38.906102-40.96704 73.973782-70.526263 104.47547l242.313791 242.310721c7.302313 7.30129 7.302313 19.138896 0.001023 26.440186C921.642774 944.912757 916.857794 946.738335 912.072815 946.738335z" fill="#ffffff" p-id="4669"></path><path d="M165.576059 421.887656c-0.696872 0-1.400906-0.038886-2.110057-0.118704-10.260691-1.152243-17.645892-10.404977-16.493649-20.666692 4.838192-43.080168 17.974373-83.934644 39.046295-121.429607 5.058203-9.002025 16.457834-12.19781 25.458835-7.139607 9.002025 5.058203 12.19781 16.45681 7.139607 25.458835-18.605753 33.108049-30.207999 69.202105-34.484396 107.282399C183.060269 414.827867 174.967964 421.887656 165.576059 421.887656z" fill="#ffffff" p-id="4670"></path></svg>
                    </button>
                </div>
                <div id="biliListVideo" class="content">
                    <ul id="searchBilibiliResults" style="background-color: #2c2c2c;"></ul>
                </div>
                <div id="biliListP" class="content" style="display: none">
                    <ul id="searchBilibiliPResults" style="background-color: #2c2c2c;"></ul>
                </div>
            </div>
            
            <div id="listMedia-div" class="tabcontenta"  style="display: none;">
                <div id="mediaList" class="content">
                    <ul id="mediaListResults" style="background-color: #2c2c2c;"></ul>
                </div>
            </div>
            <div id="qrCode-div" class="tabcontenta" style="display: none;background-color: #2c2c2c">
                <div style="display: flex;">
                    <h4 style="flex: 1;padding-left: 20px;padding-top: 20px;">
                        <p>如果该工具帮助到了您</p>
                        <p>可以的话请作者喝杯咖啡吧 ☕️</p>
                        <p style="padding-top: 10px;padding-left: 70px;">消费榜</p>
                        <table>
                          <tr>
                            <th>所需服务</th>
                            <th>每月金额</th>
                            <th>购买平台</th>
                          </tr>
                          <tr>
                            <td>域名</td>
                            <td>0￥</td>
                            <td>专员</td>
                          </tr>
                          <tr>
                            <td>网络</td>
                            <td>84.5￥</td>
                            <td>中国联通</td>
                          </tr>
                          <tr>
                            <td>电费</td>
                            <td>20-50￥</td>
                            <td>国家电网</td>
                          </tr>
                          <tr>
                            <td>QQ音乐VIP</td>
                            <td>15￥</td>
                            <td>腾讯</td>
                          </tr>
                          <tr>
                            <td>网易云VIP</td>
                            <td>15￥</td>
                            <td>网易云</td>
                          </tr>
                        </table>
                        <p style="padding-top: 10px;">什么？你问专员是什么平台？</p>
                        <p>他是我朋友 (缩</p>
                    </h4>
                    <img src="https://xc.null.red:8043/XCimg/img/save/2024/04/12/CRcode-428872311.jpg" alt="" style="flex-shrink: 0;max-width: 60%;height: auto;">
                </div>
                <div style="text-align: center;padding-top: 90px;">
                    <p style="padding-top: 10px">感谢以下佬对本项目技术上的帮助</p>
                    <p style="padding-top: 5px">
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5b0fe8a3b1ff2',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 春风萧落☾.‎˖٭𓂃</span>，为本项目大力宣传，以及各种方面的技术指导
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5b17af7a285d7',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 落零レ</span>，为本项目提供了前端上的技术指导
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'61f7881cd4538',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 铭_</span>，对bilibili接口的逆向上提供了各种帮助，以及各种方面的技术指导
                    </p>
                    <p style="padding-top: 5px">
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'534042b82ed41',1);"><span style="font-family:md;" class="mdi-qrcode"></span> Ruby</span>，为蔷薇前端的逆向提供帮助，以及各种方面的技术指导
                    </p>
                    
                    <p style="padding-top: 20px">感谢以下佬对本项目功能上的帮助</p>
                    <p style="padding-top: 5px">
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5e58fe84b5b5a',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 氒枝</span>，提出了历史播放记录以及媒体收藏等功能建议
                    </p>
                    <p style="padding-top: 5px">
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'534042b82ed41',1);"><span style="font-family:md;" class="mdi-qrcode"></span> Ruby</span>，提出了快捷切歌等功能建议
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5fe8c814c6632',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 蛮</span>，提出了收藏同步的功能
                    </p>
                    
                    <p style="padding-top: 20px">感谢以下佬对本项目运营上的帮助</p>
                    <p style="padding-top: 5px">
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'611282ced92f1',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 猹</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'61bd747546901',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 星缘·伊纳</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'6012ec1525289',1);"><span style="font-family:md;" class="mdi-qrcode"></span> Yeu</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5fe8c814c6632',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 蛮</span>，为本项目长久的运营做出贡献，以及感谢他的制图：<a class="mylink" href="http://r.iirose.com/i/24/4/24/21/0736-5D.jpg">重置投喂页面</a> <a class="mylink" href="http://r.iirose.com/i/24/4/24/21/1759-NK.png">支付二维码合并</a>
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'60fa782ec8b61',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 金木妍</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'5b771b74ed271',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 七号灭）</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'653b992309c02',1);"><span style="font-family:md;" class="mdi-qrcode"></span> REALYN</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'638aa7858ec62',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 卡兹撒嘛</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        <span class="followName2" onclick="Utils.service.getUserCard.call(this,'6385e24285d37',1);"><span style="font-family:md;" class="mdi-qrcode"></span> 苏宁</span>，为本项目长久的运营做出贡献
                    </p>
                    <p>
                        以及那些不愿透露姓名但为本项目长期运营做出贡献的佬们
                    </p>
                    
                    <p style="padding-top: 20px">以及感谢您使用本项目，您的使用是我持续维护最大的动力</p>
                </div>
            </div>
    `;

    const css = `    
        .tab {
            position: sticky;
            overflow: hidden;
            background-color: #2c2c2c;
        }

        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            transition: 0.3s;
        }

        .tab button:hover {
            background-color: #3a3a3a;
        }

        .tab button.active {
            background-color: #3a3a3a;
        }

        .tabcontent, .tabcontenta, .songtabcontent, . {
            display: none;
            border-top: none;
            background-color: #3a3a3a;
            color: #f1f1f1;
        }

        .tablinks, .tabalinks, .songtablinks, .qqtablinks {
            background-color: inherit;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 10px 15px;
            color: #f1f1f1;
        }

        .tablinks:hover, .tabalinks:hover, .songtablinks:hover， .qqtablinks:hover, .active {
            background-color: #1b8da0;
            color: #ffffff;
        }
        .tab {
            background-color: #2c2c2c;
        }

    
        .xctools-window {
            width: 650px;
            height: 500px;
            resize: both;
            overflow: auto;
            position: fixed;
            top: 50px;
            left: 50px;
            background-color: #2c2c2c;
            color: #e0e0e0;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.5);
            border: 1px solid #555;
            z-index: 9999998;
        }

        @media (max-width: 600px) {
            #XcToolsWindow {
                width: 90%;
                margin: auto;
            }
            .close-btn, #searchBtn, #searchSongListBtn, .searchSongListBtn, .searchBtn {
                font-size: 14px;
            }
        }

        .header {
            cursor: move;
            position: sticky;
            top: 0;
        }
        .header, .search-section {
            background-color: #3a3a3a;
            padding: 10px;
            color: #f1f1f1;
        }
                
        .settings-btn, .share-btn {
            padding-right: 15px;
        }
        
        .settings-menu {
            background-color: #3a3a3a;
            color: #ddd;
        }

        .settings-content h3 {
            margin-top: 0;
            color: #209cb1;
        }
        
        input[type="checkbox"], input[type="radio"] {
            margin-right: 5px;
        }
        
        label {
            margin-right: 15px;
            cursor: pointer;
        }

        #searchBtn:hover, .searchBtn:hover, #searchSongListBtn, .searchSongListBtn:hover, .tablinks:hover, .tabalinks:hover, .songtablinks:hover, .qqtablinks:hover {
            background-color: #1b8da0;
        }
        
        .close-btn:hover, .settings-btn:hover, .share-btn:hover {
            color: #ffffff;
        }

        #songSearchInput, #songListSearchInput, #songBilibiliSearchInput, #songAlbumSearchInput, #songRadioSearchInput, #songArtistSearchInput, #songQQSearchInput, #searchBtn, #searchSongListBtn, .searchBtn, .searchSongListBtn {
            border: 1px solid #777;
            height: 40px;
        }

        .close-btn, .settings-btn, .share-btn {
            float: right;
            cursor: pointer;
            color: #f1f1f1;
        }
        
        .song-item:hover {
            background-color: #505050;
        }
        
        .search-section {
            position: sticky;
            padding: 10px;
        }
        
        #songSearchInput, #songListSearchInput, #songBilibiliSearchInput, #songAlbumSearchInput, #songRadioSearchInput, #songArtistSearchInput, #songQQSearchInput {
            width: 90%;
            padding: 8px;
            border: 1px solid #777;
            background-color: #333;
            color: #ddd;
        }
        
        #searchBtn, .searchBtn, #searchSongListBtn, #searchAlbumBtn, #searchRadioBtn, #searchArtistBtn, #searchQQBtn, .searchSongListBtn {
            padding: 8px 16px;
            cursor: pointer;
            background-color: #209cb1;
            color: #fff;
            border: none;
        }
        
        .song-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #444;
        }
        
        .song-cover {
            margin-right: 10px;
            width: 50px;
            height: 50px;
            object-fit: cover;
        }
        
        .song-info {
            flex-grow: 1;
        }
        
        .song-name, .song-artist {
            margin: 0; 
        }
        
        .song-name {
            font-size: 16px;
            font-weight: bold;
            color: #e0e0e0;
        }
        
        .song-artist {
            font-size: 14px;
            color: #ccc;
        }
    `;

    var favList
    var favQQList

    if (localStorage.getItem('xc-favoriteQQList') !== null) {
        favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
    } else {
        favQQList = {}
    }

    function shuffle(arr) {
        var len = arr.length;
        for (var i = 0; i < len - 1; i++) {
            var index = parseInt(Math.random() * (len - i));
            var temp = arr[index];
            arr[index] = arr[len - i - 1];
            arr[len - i - 1] = temp;
        }
        return arr;
    }

    function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;");
    }

    function unescapeHTML(str) {
        return $("<div/>").html(str).text();
    }

    function openTab(evt) {
        displayFavorite();
        const tabName = evt.currentTarget.getAttribute('data-tabname');
        let i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    function openTabType(evt) {
        displayFavorite();
        const tabName = evt.currentTarget.getAttribute('data-tabname');
        let i, tabcontenta, tabalinks;
        tabcontenta = document.getElementsByClassName("tabcontenta");
        for (i = 0; i < tabcontenta.length; i++) {
            tabcontenta[i].style.display = "none";
        }
        tabalinks = document.getElementsByClassName("tabalinks");
        for (i = 0; i < tabalinks.length; i++) {
            tabalinks[i].className = tabalinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    function openQQTab(evt) {
        displayFavorite();
        const tabName = evt.currentTarget.getAttribute('data-tabname');
        let i, tabcontenta, tabalinks;
        tabcontenta = document.getElementsByClassName("songqqtabcontent");
        for (i = 0; i < tabcontenta.length; i++) {
            tabcontenta[i].style.display = "none";
        }
        tabalinks = document.getElementsByClassName("qqtablinks");
        for (i = 0; i < tabalinks.length; i++) {
            tabalinks[i].className = tabalinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    function openSongTab(evt) {
        displayFavorite();
        const tabName = evt.currentTarget.getAttribute('data-tabname');
        let i, songtabcontent, songtablinks;
        songtabcontent = document.getElementsByClassName("songtabcontent");
        for (i = 0; i < songtabcontent.length; i++) {
            songtabcontent[i].style.display = "none";
        }
        songtablinks = document.getElementsByClassName("songtablinks");
        for (i = 0; i < songtablinks.length; i++) {
            songtablinks[i].className = songtablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    style.type = 'text/css';
    if (style.styleSheet) {
        style.styleSheet.cssText = css;
    } else {
        style.appendChild(document.createTextNode(css));
    }

    document.head.appendChild(style);
    document.body.insertAdjacentHTML('beforeend', windowHtml);

    const XCBSignal = document.getElementById('XCBSignal')

    xcbsInstance.onData = function (_, data) {
        try {
            data = JSON.parse(data)
        } catch (_) {return;}
        if (data.uid === userUid && data.platform === "media_play") {
            if (data.type === "ping") {
                BS.bs_status = true
                BS.ping_status = true
                XCBSignal.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" style=\"--darkreader-inline-fill: currentColor;top: 14px;position: absolute;left: 130px;\" height=\"20\" width=\"20\" data-darkreader-inline-fill=\"\"><path d=\"M16 4h6v16h-6V4ZM2 14h6v6H2v-6Zm13-4H9v10h6V10Z\"></path></svg>"

            } else if (data.type === "checkNeteaseFavorites") {
                if (!syncNeteaseFavorites.checked) return;
                if (data.data === 'pass') return

                if (localStorage.getItem('xc-favoriteList') !== null) {
                    favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
                } else {
                    favList = {}
                }

                calculateSHA256(JSON.stringify(favList)).then(function(hash) {
                    BS.send({"data": favList, "sha256": hash}, 'syncNeteaseFavorites', true)
                })

            } else if (data.type === "checkQQFavorites") {
                if (!syncQQFavorites.checked) return;
                if (data.data === 'pass') return

                if (localStorage.getItem('xc-favoriteQQList') !== null) {
                    favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                } else {
                    favQQList = {}
                }

                calculateSHA256(JSON.stringify(favQQList)).then(function(hash) {
                    BS.send({"data": favQQList, "sha256": hash}, 'syncQQFavorites', true)
                })

            } else if (data.type === "syncNeteaseFavorites") {
                if (!syncNeteaseFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteList') !== null) {
                    favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
                } else {
                    favList = {}
                }

                calculateSHA256(JSON.stringify(favList)).then(function(hash) {
                    if (data.data !== hash) {
                        BS.send("", 'pullNeteaseFavorites')
                    }
                })
            } else if (data.type === "syncQQFavorites") {
                if (!syncQQFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteQQList') !== null) {
                    favList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                } else {
                    favList = {}
                }

                calculateSHA256(JSON.stringify(favList)).then(function(hash) {
                    if (data.data !== hash) {
                        BS.send("", 'pullQQFavorites')
                    }
                })
            } else if (data.type === "pullNeteaseFavorites") {
                if (!syncNeteaseFavorites.checked) return;
                localStorage.setItem('xc-favoriteList', JSON.stringify(data.data));
            } else if (data.type === "pullQQFavorites") {
                if (!syncQQFavorites.checked) return;
                localStorage.setItem('xc-favoriteQQList', JSON.stringify(data.data));

            } else if (data.type === "appendNeteaseFavorites") {
                if (!syncNeteaseFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteList') !== null) {
                    favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
                } else {
                    favList = {}
                }
                favList[data.data.id] = data.data
                localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
            } else if (data.type === "appendQQFavorites") {
                if (!syncQQFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteQQList') !== null) {
                    favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                } else {
                    favQQList = {}
                }
                favQQList[data.data.id] = data.data
                localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));

            } else if (data.type === "deleteNeteaseFavorites") {
                if (!syncNeteaseFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteList') !== null) {
                    favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
                } else {
                    favList = {}
                }
                if (data.data in favList) delete favList[data.data]
                localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
            } else if (data.type === "deleteQQFavorites") {
                if (!syncQQFavorites.checked) return;
                if (localStorage.getItem('xc-favoriteQQList') !== null) {
                    favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                } else {
                    favQQList = {}
                }
                if (data.data in favQQList) delete favQQList[data.data]
                localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));
            }
        }
    };

    class BS {
        static timer = null;
        static bs_status = true;
        static ping_status = false;
        static error_status = false;

        static send(data, type, json) {
            if (data === undefined && type === undefined) return
            if (json === undefined) json = false

            if (this.bs_status !== true) {
                BS.ping()
                XCBSignal.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" data-darkreader-inline-fill=\"\" style=\"--darkreader-inline-fill: currentColor;top: 14px;position: absolute;left: 130px;\" height=\"20\" width=\"20\"><path d=\"M4 2H2v2h2v2H2v2h2V6h2v2h2V6H6V4h2V2H6v2H4V2Zm12 2v16h6V4h-6Zm2 2h2v12h-2V6Zm-9 4v10h6V10H9Zm2 8v-6h2v6h-2Zm-3-4v6H2v-6h6Zm-2 4v-2H4v2h2Z\"></path></svg>"
                _alert('XCBS|发送消息失败')
                return;
            }
            if (json) {
                xcbsInstance.send("664b48e91eb7d", `{"uid": "${userUid}", "type": "${type.toString()}", "platform": "media_play", "data": ${JSON.stringify(data)}}`)
            } else {
                xcbsInstance.send("664b48e91eb7d", `{"uid": "${userUid}", "type": "${type.toString()}", "platform": "media_play", "data": "${data.toString()}"}`)
            }
        }

        static ping() {
            if (this.timer !== null) return

            this.send("", "ping")

            this.timer = setTimeout(() => {
                this.timer = null;
            }, 5000);
        }
    }

    let nextInterval = 120000;
    function BSHeart() {
        BS.ping()
        nextInterval = 120000;
        if (BS.error_status === true) nextInterval = 5000

        setTimeout(function () {
            if (BS.ping_status === true) {
                syncToBS();
                BS.ping_status = false
                BS.bs_status = true
                if (BS.error_status === false) return;
                BS.error_status = false
                XCBSignal.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" style=\"--darkreader-inline-fill: currentColor;top: 14px;position: absolute;left: 130px;\" height=\"20\" width=\"20\" data-darkreader-inline-fill=\"\"><path d=\"M16 4h6v16h-6V4ZM2 14h6v6H2v-6Zm13-4H9v10h6V10Z\"></path></svg>"
                //_alert("XCBS|与基站恢复通讯")
            } else {
                nextInterval = 5000
                if (BS.error_status === true) return;
                BS.error_status = true
                XCBSignal.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" data-darkreader-inline-fill=\"\" style=\"--darkreader-inline-fill: currentColor;top: 14px;position: absolute;left: 130px;\" height=\"20\" width=\"20\"><path d=\"M4 2H2v2h2v2H2v2h2V6h2v2h2V6H6V4h2V2H6v2H4V2Zm12 2v16h6V4h-6Zm2 2h2v12h-2V6Zm-9 4v10h6V10H9Zm2 8v-6h2v6h-2Zm-3-4v6H2v-6h6Zm-2 4v-2H4v2h2Z\"></path></svg>"
                //_alert("XCBS|无法连接到基站")
                clearInterval(heartbeatInterval);
                heartbeatInterval = setInterval(BSHeart, nextInterval);
            }
        }, 5000)
    }

    BSHeart();

    let heartbeatInterval = setInterval(BSHeart, nextInterval);

    /*
    var targetElement = document.getElementById('movePanelHolder');
    var container = document.createElement('div');
    container.innerHTML = windowHtml;
    targetElement.appendChild(container);
     */

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function callAPI() {
        await fetch(`https://xc.null.red:8043/api/online/heartbeat?t=media&_=${Date.now()}`);

        await sleep(200);

        await fetch(`https://xc.null.red:8043/api/online/list?t=media&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('onlineCount').textContent = `在线人数: ${data.online}`;
            })
            .catch(error => {
                _alert(`获取在线人数失败，请检查网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    setInterval(callAPI, 2 * 60 * 1000); // 2分钟 = 2 * 60秒 * 1000毫秒

    const resultsElement = document.getElementById('searchSongResults');

    const resultsQQElement = document.getElementById('searchQQResults');

    const resultsSongListElement = document.getElementById('searchSongListResults')
    const searchSongListShowElement = document.getElementById('searchSongListShowResults')

    const searchAlbumElement = document.getElementById('searchAlbumResults')
    const searchAlbumShowElement = document.getElementById('searchAlbumShowResults')

    const searchRadioElement = document.getElementById('searchRadioResults')
    const searchRadioShowElement = document.getElementById('searchRadioShowResults')

    const searchArtistElement = document.getElementById('searchArtistResults')
    const searchArtistShowElement = document.getElementById('searchArtistShowResults')

    const resultsBilibiliElement = document.getElementById('searchBilibiliResults');
    const resultsBilibiliPElement = document.getElementById('searchBilibiliPResults');

    const mediaListElement = document.getElementById('mediaListResults');
    const favoriteElement = document.getElementById('favoriteListSong');
    const favoriteQQElement = document.getElementById('favoriteQQListSong');
    const topElement = document.getElementById('topListSong');
    const topQQElement = document.getElementById('QQtopListSong');

    // 快捷键监听
    document.addEventListener('keydown', function(event) {
        if (event.altKey && (event.key.toLowerCase() === 'q' || event.key.toLowerCase() === "œ")) {
            toggleWindow();
        }
    });

    document.getElementById('songSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchSongs(this.value);
            this.value = ''
        }
    });

    document.getElementById('songQQSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchQQSongs(this.value);
            this.value = ''
        }
    });

    document.getElementById('songListSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchSongList(this.value);
            this.value = ''
        }
    });

    document.getElementById('songAlbumSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchAlbum(this.value);
            this.value = ''
        }
    });

    document.getElementById('songRadioSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchRadio(this.value);
            this.value = ''
        }
    });

    document.getElementById('songArtistSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchArtist(this.value);
            this.value = ''
        }
    });

    document.getElementById('songBilibiliSearchInput').addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            searchVideos(this.value, 1);
            this.value = ''
        }
    });


    // 移动端下滑
    document.addEventListener('touchstart', handleTouchStart, false);
    document.addEventListener('touchmove', handleTouchMove, false);

    var initialY = null;
    var initialX = null;

    function handleTouchStart(event) {
        // 确保有两个触摸点
        if (event.touches.length === 2) {
            initialX = event.touches[0].clientX;
            initialY = event.touches[0].clientY;
        } else {
            // 如果不是两个触摸点，重置初始坐标
            initialX = null;
            initialY = null;
        }
    }

    function handleTouchMove(event) {
        if (initialX === null || initialY === null) {
            return;
        }

        if (event.touches.length === 2) {
            var currentX = event.touches[0].clientX;
            var currentY = event.touches[0].clientY;

            var diffX = initialX - currentX;
            var diffY = initialY - currentY;

            if (Math.abs(diffY) > Math.abs(diffX) && diffY < 0) {
                toggleWindow();

                initialX = null;
                initialY = null;
            }
        }
    }

    const tabHeader = document.getElementById('header')
    const tabTab = document.getElementById('tab')
    const qqTab = document.getElementById('qqtab')
    const qqtabSearch = document.getElementById('search-section-qq')
    const tabaTab = document.getElementById('taba')
    const songTypeTab = document.getElementById('songTab')
    const tabSearch = document.getElementById('search-section')
    const tabSearchSongList = document.getElementById('search-section-song-list')
    const tabBilibiliSearch = document.getElementById('search-bilibili-section')
    const tabAlbumSearch = document.getElementById('search-section-album')
    const tabRadioSearch = document.getElementById('search-section-radio')
    const tabArtistSearch = document.getElementById('search-section-artist')

    function toggleWindow() {
        if (Info.room.identity.toString() !== "0") {
            try {
                document.querySelector('.adminCut-btn').style.display = "block"
                document.querySelector('.adminCutAll-btn').style.display = "block"
            } catch (_){}
        }
        const windowElement = document.getElementById('XcToolsWindow');
        windowElement.style.display = windowElement.style.display === 'none' ? 'block' : 'none';
        if (windowElement.style.display !== 'none') {
            setTimeout(function() {
                tabaTab.style.cssText = `top: ${tabHeader.offsetHeight.toString()}px;`
                tabTab.style.cssText = `top: ${(tabTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
                qqTab.style.cssText = `top: ${(tabHeader.offsetHeight + tabaTab.offsetHeight).toString()}px`
                qqtabSearch.style.cssText = `background-color: #2c2c2c;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
                songTypeTab.style.cssText = `top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
                tabSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
                tabSearchSongList.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
                tabAlbumSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
                tabRadioSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
                tabArtistSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
                tabBilibiliSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: ${(tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px;`
            }, 1);

            document.getElementById('songSearchInput').focus();
            document.querySelectorAll('input[name="lryType"]').forEach((radio) => {
                if (radio.value === localStorage.getItem('xc-lryType')) {
                    radio.checked = true;
                }
            });
            if (localStorage.getItem('xc-media_card') !== null) {
                document.getElementById('media_card').checked = localStorage.getItem('xc-media_card') === 'true';
            }
            if (localStorage.getItem('xc-bilibili_dash') !== null) {
                document.getElementById('bilibili_dash').checked = localStorage.getItem('xc-bilibili_dash') === 'true';
            }
            if (localStorage.getItem('xc-image_average_color') !== null) {
                document.getElementById('image_average_color').checked = localStorage.getItem('xc-image_average_color') === 'true';
            }
            if (localStorage.getItem('xc-syncQQFavorites') !== null) {
                document.getElementById('syncQQFavorites').checked = localStorage.getItem('xc-syncQQFavorites') === 'true';
            }
            if (localStorage.getItem('xc-syncNeteaseFavorites') !== null) {
                document.getElementById('syncNeteaseFavorites').checked = localStorage.getItem('xc-syncNeteaseFavorites') === 'true';
            }
        }
    }

    // 窗口拖动功能
    dragElement(document.getElementById("XcToolsWindow"));

    function addEvent(element, event, handler) {
        if ('ontouchstart' in window) {
            element.addEventListener('touchstart', handler, false);
        } else {
            element.addEventListener(event, handler, false);
        }
    }

    const backSongListButton = document.getElementById('backSongListBtn');
    const backAlbumButton = document.getElementById('backSongAlbumBtn');
    const backRadioButton = document.getElementById('backSongRadioBtn');
    const backArtistButton = document.getElementById('backSongArtistBtn');
    const textarea = document.getElementById('moveinput');
    const backBilibiliButton = document.getElementById('backBilibiliBtn');

    addEvent(document.querySelector('.cut-btn'), 'click', function() {
        API.send("cut", 0)
    });

    addEvent(document.querySelector('.cutAll-btn'), 'click', function() {
        API.send("cut all", 1)
    });

    addEvent(document.querySelector('.adminCut-btn'), 'click', function() {
        socket.send('!11')
    });

    addEvent(document.querySelector('.adminCutAll-btn'), 'click', function() {
        socket.send('!13')
    });

    addEvent(document.querySelector('.close-btn'), 'click', function() {
        document.getElementById('XcToolsWindow').style.display = 'none';
    });

    addEvent(document.getElementById('searchBtn'), 'click', function() {
        const query = document.getElementById('songSearchInput').value;
        document.getElementById('songSearchInput').value = ''
        searchSongs(query);
    });

    addEvent(document.getElementById('searchQQBtn'), 'click', function() {
        const query = document.getElementById('songQQSearchInput').value;
        document.getElementById('songQQSearchInput').value = ''
        searchQQSongs(query);
    });

    addEvent(document.getElementById('searchSongListBtn'), 'click', function() {
        const query = document.getElementById('songListSearchInput').value;
        document.getElementById('songListSearchInput').value = ''
        searchSongList(query);
    });

    addEvent(document.getElementById('searchAlbumBtn'), 'click', function() {
        const query = document.getElementById('songAlbumSearchInput').value;
        document.getElementById('songAlbumSearchInput').value = ''
        searchAlbum(query);
    });

    addEvent(document.getElementById('searchRadioBtn'), 'click', function() {
        const query = document.getElementById('songRadioSearchInput').value;
        document.getElementById('songRadioSearchInput').value = ''
        searchRadio(query);
    });

    addEvent(document.getElementById('searchArtistBtn'), 'click', function() {
        const query = document.getElementById('songArtistSearchInput').value;
        document.getElementById('songArtistSearchInput').value = ''
        searchArtist(query);
    });

    addEvent(document.getElementById('searchBilibiliBtn'), 'click', function() {
        const query = document.getElementById('songBilibiliSearchInput').value;
        document.getElementById('songBilibiliSearchInput').value = ''
        searchVideos(query, 1);
    });

    addEvent(backBilibiliButton, 'click', function() {
        resultsBilibiliPElement.innerHTML = ''
        backBilibiliButton.style.display = 'none';
        document.getElementById('biliListVideo').style.display = 'block'
        document.getElementById('biliListP').style.display = 'none'
    });

    addEvent(backSongListButton, 'click', function() {
        searchSongListShowElement.innerHTML = ''
        backSongListButton.style.display = 'none';
        document.getElementById('songList').style.display = 'block'
        document.getElementById('songListShow').style.display = 'none'
    });

    addEvent(backAlbumButton, 'click', function() {
        searchAlbumShowElement.innerHTML = ''
        backAlbumButton.style.display = 'none';
        document.getElementById('songAlbum').style.display = 'block'
        document.getElementById('songAlbumShow').style.display = 'none'
    });

    addEvent(backRadioButton, 'click', function() {
        searchRadioShowElement.innerHTML = ''
        backRadioButton.style.display = 'none';
        document.getElementById('songRadio').style.display = 'block'
        document.getElementById('songRadioShow').style.display = 'none'
    });

    addEvent(backArtistButton, 'click', function() {
        searchArtistShowElement.innerHTML = ''
        backArtistButton.style.display = 'none';
        document.getElementById('songArtist').style.display = 'block'
        document.getElementById('songArtistShow').style.display = 'none'
    });

    addEvent(document.querySelector(".settings-btn"), 'click', function() {
        const settingsMenu = document.getElementById('settingsMenu');
        settingsMenu.style.display = settingsMenu.style.display === 'none' ? 'block' : 'none';
        if (settingsMenu.style.display === 'block') {
            XcToolsWindow.scrollTop = 0
        }
    });

    addEvent(document.querySelector('.share-btn'), 'click', function() {
            const text = '媒体解析工具箱食用方法：\n' +
            '1. 打开左侧侧栏，选择"工具" > "终端"。\n' +
            '2. 在终端中输入【js】执行后在框内输入【 https://xc.null.red:8043/XCimg/img/file/xcwqw1/media_play.js 】 并点击确定即可。\n' +
            '3. 等待重载完成后 电脑端按下【alt+q】移动端【双指下滑】可呼出菜单，MacOS为【option+q】。各平台的搜索框内直接输入地址部分可直接播放\n' +
            '其他详细内容请见 [@6533df3d933bf@] 简介'
        if (textarea.value !== undefined) {
            textarea.value = textarea.value.toString() + text;
        } else {
            textarea.value = text;
        }
        _alert('内容已填充到输入框，感谢您的推广');
    });

    function getImageAverageColor(url, callback) {
        if (image_average_color.checked) url = "http://z.iirose.com/lib/php/function/loadImg.php?s=" + url;

        let load_status = false
        const img = new Image();
        img.crossOrigin = 'Anonymous'; // 用于跨域请求图片

        let timer = setTimeout(() => {
            callback(Cookie('colorpicker').substring(1));
            img.src = ''; // 取消图片加载
            load_status = true
        }, 5000); // 设置2秒超时

        img.onload = function() {
            clearTimeout(timer); // 清除超时计时器

            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;

            ctx.drawImage(img, 0, 0, img.width, img.height);

            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            let r = 0, g = 0, b = 0;

            for (let i = 0; i < data.length; i += 4) {
                r += data[i];
                g += data[i + 1];
                b += data[i + 2];
            }

            r = Math.floor(r / (data.length / 4));
            g = Math.floor(g / (data.length / 4));
            b = Math.floor(b / (data.length / 4));
            if (load_status) return
            callback(rgb2hex(`${r}, ${g}, ${b}`));
        };

        img.src = url;
    }


    let search_key;
    let offset = 1;

    function getSelectedRoomMediaType() {
        const selectedRadio = document.querySelector('input[name="roomMediaType"]:checked');
        return selectedRadio ? selectedRadio.value : null;
    }
    function getSelectedLryType() {
        const selectedRadio = document.querySelector('input[name="lryType"]:checked');
        return selectedRadio ? selectedRadio.value : null;
    }

    const send_media_card = document.getElementById("media_card");
    const bilibili_dash = document.getElementById("bilibili_dash");
    const image_average_color = document.getElementById("image_average_color");
    const syncQQFavorites = document.getElementById("syncQQFavorites");
    const syncNeteaseFavorites = document.getElementById("syncNeteaseFavorites");
    let search_data_status = true

    // 收藏更新至云端
    function syncToBS() {
        if (localStorage.getItem('xc-favoriteList') !== null) {
            favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
        } else {
            favList = {}
        }

        if (localStorage.getItem('xc-favoriteQQList') !== null) {
            favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
        } else {
            favQQList = {}
        }

        calculateSHA256(JSON.stringify(favList)).then(function(hash) {
            if (syncNeteaseFavorites.checked) BS.send(hash, 'checkNeteaseFavorites')
        })

        calculateSHA256(JSON.stringify(favQQList)).then(function(hash) {
            if (syncQQFavorites.checked) BS.send(hash, 'checkQQFavorites')
        })
    }

    function extractSongId(url) {
        if (!url.includes("song")) return null
        const regex = /id=(\d+)/;
        let match = url.match(regex);
        if (match) {
            return match[1]
        } return null
    }

    function extractQQSongId(url) {
        const regex = /songid=(\d+)/;
        let match = url.match(regex);
        if (match) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `https://xc.null.red:8043/music/qq/song/id2mid?id=${match[1]}`, false);
            xhr.send();

            if (xhr.status === 200) {
                const data = JSON.parse(xhr.responseText);
                return data.mid;
            }
        }
        const pattern = /songDetail\/(\w+)/;
        match = url.match(pattern);

        if (match) {
            return match[1];
        } else return null
    }

    function extractSongListId(url) {
        if (!url.includes("playlist")) return null
        const regex = /id=(\d+)/;
        let match = url.match(regex);
        if (match) {
            return match[1]
        } return null
    }

    function extractAlbumId(url) {
        if (!url.includes("album")) return null
        const regex = /id=(\d+)/;
        let match = url.match(regex);
        if (match) {
            return match[1]
        } return null
    }

    function extractArtistId(url) {
        if (!url.includes("artist")) return null
        const regex = /id=(\d+)/;
        let match = url.match(regex);
        if (match) {
            return match[1]
        } return null
    }

    function extractRadioId(url) {
        if (!url.includes("radio")) return null
        const regex = /id=(\d+)/;
        let match = url.match(regex);
        if (match) {
            return match[1]
        } return null
    }

    function searchSongs(query, search_offset) {
        if (!search_offset) {
            if (encodeURIComponent(query) === "") {
                _alert('输入内容不能为空！')
                return
            }

            let song_id = extractSongId(query)
            if (song_id !== null) {
                playSong(song_id)
                return;
            } else {
                fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.link === null) return;
                        song_id = extractSongId(data.link)
                        playSong(song_id)
                    })
            }
        }

        search_key = query

        let offset_num;
        if (search_offset) {
            offset_num = (search_offset - 1) * 10
            offset = search_offset
        } else {
            offset_num = 0
            offset = 1
            search_data_status = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/netease/cloudsearch?keywords=${encodeURIComponent(query)}&limit=10&type=1&offset=${offset_num}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    if (offset_num === 0) {
                        resultsElement.innerHTML = '';
                    }
                    displaySongs(data.result.songs);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    search_data_status = false
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    let search_qq_key;
    let qq_offset = 1;
    let qq_search_status = true

    function searchQQSongs(query, qq_offset) {
        if (!qq_offset) {
            if (encodeURIComponent(query) === "") {
                _alert('输入内容不能为空！')
                return
            }

            let song_id = extractQQSongId(query)
            if (song_id !== null) {
                playQQSong(song_id)
                return;
            }
        }

        search_qq_key = query

        let offset_num;
        if (qq_offset) {
            offset = qq_offset
        } else {
            offset = 1
            qq_search_status = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/qq/search?key=${encodeURIComponent(query)}&pageNo=${offset}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.result === 100) {
                    if (offset === 1) {
                        resultsQQElement.innerHTML = '';
                    }
                    displayQQSongs(data.data.list);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    qq_search_status = false
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    let search_song_list = false
    let search_song_key = ''
    let song_list_offset = 1

    let search_album_offset = 1
    let search_album_key = ''
    let search_album = false

    let search_radio_offset = 1
    let search_radio_key = ''
    let search_radio = false

    let search_artist_offset = 1
    let search_artist_key = ''
    let search_artist = false

    function searchSongList(query, search_song_list_offset) {
        if (encodeURIComponent(query) === "") {
            _alert('输入内容不能为空！')
            return
        }

        let song_id = extractSongListId(query)
        if (song_id !== null) {
            fetch(`https://xc.null.red:8043/api/netease/playlist/detail?id=${song_id}`)
                .then(response => response.json())
                .then(async data => {
                    if (data.playlist.trackCount === 0) {
                        _alert('该歌单内没有任何歌曲')
                        return
                    }
                    playSongList(song_id, data.playlist.trackCount, 1)
                })
            return;
        } else {
            fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.link === null) return;
                    song_id = extractSongListId(data.link)
                    fetch(`https://xc.null.red:8043/api/netease/playlist/detail?id=${song_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.playlist.trackCount === 0) {
                                _alert('该歌单内没有任何歌曲')
                                return
                            }
                            playSongList(song_id, data.playlist.trackCount, 1)
                        })
                })
        }

        let offset_num;
        search_song_key = query

        if (search_song_list_offset) {
            offset_num = (search_song_list_offset - 1) * 10
            song_list_offset = search_song_list_offset
        } else {
            offset_num = 0
            song_list_offset = 1
            search_song_list = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/netease/cloudsearch?keywords=${encodeURIComponent(query)}&limit=10&type=1000&offset=${offset_num}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    if (offset_num === 0) {
                        resultsSongListElement.innerHTML = '';
                    }
                    displaySongList(data.result.playlists);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function searchAlbum(query, search_album_offset) {
        if (encodeURIComponent(query) === "") {
            _alert('输入内容不能为空！')
            return
        }

        let song_id = extractAlbumId(query)
        if (song_id !== null) {
            fetch(`https://xc.null.red:8043/api/netease/album?id=${song_id}`)
                .then(response => response.json())
                .then(async data => {
                    if (data.songs.length === 0) {
                        _alert('该专辑内没有任何歌曲')
                        return
                    }
                    playAlbum(song_id, 1)
                })
            return;
        } else {
            fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.link === null) return;
                    song_id = extractAlbumId(data.link)
                    fetch(`https://xc.null.red:8043/api/netease/album?id=${song_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.songs.length === 0) {
                                _alert('该专辑内没有任何歌曲')
                                return
                            }
                            playAlbum(song_id, 1)
                        })
                })
        }

        let offset_num;
        search_album_key = query

        if (search_album_offset) {
            offset_num = (search_album_offset - 1) * 10
        } else {
            offset_num = 0
            search_album = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/netease/cloudsearch?keywords=${encodeURIComponent(query)}&limit=10&type=10&offset=${offset_num}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    if (offset_num === 0) {
                        searchAlbumElement.innerHTML = '';
                    }
                    displayAlbum(data.result.albums);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function searchRadio(query, search_radio_offset) {
        if (encodeURIComponent(query) === "") {
            _alert('输入内容不能为空！')
            return
        }

        let song_id = extractRadioId(query)
        if (song_id !== null) {
            fetch(`https://xc.null.red:8043/api/netease/dj/program?rid=${song_id}`)
                .then(response => response.json())
                .then(async data => {
                    if (data.programs.length === 0) {
                        _alert('该电台内没有任何歌曲')
                        return
                    }
                    playRadio(song_id, 1)
                })
            return;
        } else {
            fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.link === null) return;
                    song_id = extractAlbumId(data.link)
                    fetch(`https://xc.null.red:8043/api/netease/song/detail?ids=${song_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.programs.length === 0) {
                                _alert('该电台内没有任何歌曲')
                                return
                            }
                            playRadio(song_id, 1)
                        })
                })
        }

        let offset_num;
        search_radio_key = query

        if (search_radio_offset) {
            offset_num = (search_radio_offset - 1) * 10
        } else {
            offset_num = 0
            search_radio = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/netease/cloudsearch?keywords=${encodeURIComponent(query)}&limit=10&type=1009&offset=${offset_num}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    if (offset_num === 0) {
                        searchRadioElement.innerHTML = '';
                    }
                    displayRadio(data.result.djRadios);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function searchArtist(query, search_artist_offset) {
        if (encodeURIComponent(query) === "") {
            _alert('输入内容不能为空！')
            return
        }

        let song_id = extractArtistId(query)
        if (song_id !== null) {
            fetch(`https://xc.null.red:8043/api/netease/artist/songs?id=${song_id}`)
                .then(response => response.json())
                .then(async data => {
                    if (data.songs.length === 0) {
                        _alert('该歌手没有任何歌曲')
                        return
                    }
                    playArtist(song_id, 1)
                })
            return;
        } else {
            fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.link === null) return;
                    song_id = extractAlbumId(data.link)
                    fetch(`https://xc.null.red:8043/api/netease/artist/songs?id=${song_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.songs.length === 0) {
                                _alert('该歌手没有任何歌曲')
                                return
                            }
                            playArtist(song_id, 1)
                        })
                })
        }

        let offset_num;
        search_artist_key = query

        if (search_artist_offset) {
            offset_num = (search_artist_offset - 1) * 10
        } else {
            offset_num = 0
            search_artist = true
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/netease/cloudsearch?keywords=${encodeURIComponent(query)}&limit=10&type=100&offset=${offset_num}&_=${Date.now()}`) // &limit=10
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    if (offset_num === 0) {
                        searchArtistElement.innerHTML = '';
                    }
                    displayArtist(data.result.artists);
                } else {
                    _alert('搜索失败，请再次尝试');
                }
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function extractBV(url) {
        const pattern = /video\/(BV[0-9A-Za-z]+)(\/|\?|$)/;
        const match = pattern.exec(url);
        if (match && match[1]) {
            return match[1];
        } else {
            return null;
        }
    }

    function extractBVTv(text) {
        const regex = /https:\/\/b23\.tv\/[A-Za-z0-9]+/g;
        const matches = text.match(regex);
        return matches ? matches : null;
    }

    let video_search_key = null;
    let video_num = 1;
    let search_bilibili_data_status = true

    function searchVideos(query, search_offset) {
        if (encodeURIComponent(query) === "") {
            _alert('输入内容不能为空！')
            return
        }
        backBilibiliButton.style.display = 'none';
        document.getElementById('biliListVideo').style.display = 'block'
        document.getElementById('biliListP').style.display = 'none'

        let bvid = extractBV(query);
        if (bvid === null) {
            bvid = extractBVTv(query)
            if (bvid !== null) {
                fetch(`https://xc.null.red:8043/api/extractLink?date=${query}&_=${Date.now()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.link === null) return;
                        bvid = extractBV(data.link)
                        fetch(`https://xc.null.red:8043/api/bilibili/video/search?keywords=${encodeURIComponent(bvid)}&page=${search_offset}&_=${Date.now()}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data.length === 0) {
                                    _alert('bv号无效')
                                    return
                                }
                                playVideo(bvid, data[0].auther, data[0].title, data[0])
                            })
                    })
                return;
            }
        }
        if (bvid !== null) {
            fetch(`https://xc.null.red:8043/api/bilibili/video/search?keywords=${encodeURIComponent(bvid)}&page=${search_offset}&_=${Date.now()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.length === 0) {
                        _alert('bv号无效')
                        return
                    }
                    playVideo(bvid, data[0].auther, data[0].title, data[0])
                })
                .catch(error => {
                    _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
                });
            return;
        }

        video_search_key = query
        video_num = search_offset
        search_bilibili_data_status = true

        if (search_offset === 1) {
            _alert('搜索中...');
        }

        fetch(`https://xc.null.red:8043/api/bilibili/video/search?keywords=${encodeURIComponent(query)}&page=${search_offset}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                if (search_offset === 1) {
                    resultsBilibiliElement.innerHTML = '';
                }
                if (data.length === 0) {
                    search_bilibili_data_status = false
                    return
                }

                document.getElementById('biliListP').style.display = 'none'
                document.getElementById('biliListVideo').style.display = 'block'

                displayVideos(data);
            })
            .catch(error => {
                if (error instanceof TypeError) {
                    return
                }
                _alert(`请检查关键字是否包含违禁词，以及网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function displaySongs(songs) {
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.al.picUrl + "?param=50y50";
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = song.name;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.ar.map(artist => artist.name).join(' & ');
            artistNamesElement.classList.add('song-artist');

            if (localStorage.getItem('xc-favoriteList') !== null) {
                favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
            } else {
                favList = {}
            }

            const favoriteContainer = document.createElement('div');
            favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
            if (song.id in favList) {
                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                favoriteContainer.classList.add('favorited');
            } else {
                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
            }
            favoriteContainer.addEventListener('click', (event) => {
                event.stopPropagation();
                if (localStorage.getItem('xc-favoriteList') !== null) {
                    favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                } else {
                    favList = {}
                }

                if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                    delete favList[song.id]
                    favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    favoriteContainer.classList.remove('favorited');
                    BS.send(song.id, "deleteNeteaseFavorites")
                    _alert(`取消收藏歌曲：${song.name}`);
                } else {
                    favList[song.id] = {
                        id: song.id,
                        name: song.name,
                        auther: song.ar.map(artist => artist.name).join(' & '),
                        pic: song.al.picUrl,
                    }
                    favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                    favoriteContainer.classList.add('favorited');
                    BS.send(favList[song.id], "appendNeteaseFavorites", true)
                    _alert(`已收藏歌曲：${song.name}`);
                }
                localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                displayFavorite();
            });

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.appendChild(favoriteContainer);

            li.addEventListener('click', () => playSong(song.id));
            resultsElement.appendChild(li);
        });
    }

    function displayQQSongs(songs) {
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = `https://xc.null.red:8043/music/qq/song/pic/url?id=${song.songmid}#.jpg`;
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = song.songname;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.singer.map(artist => artist.name).join(' & ');
            artistNamesElement.classList.add('song-artist');

            if (localStorage.getItem('xc-favoriteQQList') !== null) {
                favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
            } else {
                favQQList = {}
            }

            const favoriteContainer = document.createElement('div');
            favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
            if (song.songmid in favQQList) {
                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                favoriteContainer.classList.add('QQfavorites');
            } else {
                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
            }
            favoriteContainer.addEventListener('click', (event) => {
                event.stopPropagation();
                if (localStorage.getItem('xc-favoriteQQList') !== null) {
                    favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                } else {
                    favQQList = {}
                }

                if (favoriteContainer.classList.contains('QQfavorites') && song.songmid in favQQList) {
                    delete favQQList[song.songmid]
                    favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    favoriteContainer.classList.remove('QQfavorites');
                    BS.send(song.songmid, "deleteQQFavorites")
                    _alert(`取消收藏歌曲：${song.songname}`);
                } else {
                    favQQList[song.songmid] = {
                        id: song.songmid,
                        name: song.songname,
                        auther: song.singer.map(artist => artist.name).join(' & '),
                        mediaId: song.strMediaMid,
                        pic: `https://xc.null.red:8043/music/qq/song/pic/url?id=${song.songmid}#.jpg`,
                    }
                    favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                    favoriteContainer.classList.add('QQfavorites');
                    BS.send(favQQList[song.songmid], "appendQQFavorites", true)
                    _alert(`已收藏歌曲：${song.songname}`);
                }
                localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));
                displayFavorite();
            });

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.appendChild(favoriteContainer);

            li.addEventListener('click', () => playQQSong(song.songmid, song.strMediaMid));
            resultsQQElement.appendChild(li);
        });
    }

    function displaySongList(songs) {
        searchSongListShowElement.innerHTML = ''
        backSongListButton.style.display = 'none'
        document.getElementById('songList').style.display = 'block'
        document.getElementById('songListShow').style.display = 'none'

        backSongListButton.style.display = 'none';
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.coverImgUrl + "?param=50y50";
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = `${song.name} - 共${song.trackCount}首`;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.creator.nickname;
            artistNamesElement.classList.add('song-artist');

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.addEventListener('click', () => playSongList(song.id, song.trackCount, 1));
            resultsSongListElement.appendChild(li);
        });
    }

    function displayAlbum(songs) {
        searchAlbumShowElement.innerHTML = ''
        backAlbumButton.style.display = 'none';
        document.getElementById('songAlbum').style.display = 'block'
        document.getElementById('songAlbumShow').style.display = 'none'
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.picUrl + "?param=50y50";
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = `${song.name}`;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.artists.map(artist => artist.name).join(' & ');
            artistNamesElement.classList.add('song-artist');

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.addEventListener('click', () => playAlbum(song.id, 1));
            searchAlbumElement.appendChild(li);
        });
    }

    function displayRadio(songs) {
        searchRadioShowElement.innerHTML = ''
        backRadioButton.style.display = 'none';
        document.getElementById('songRadio').style.display = 'block'
        document.getElementById('songRadioShow').style.display = 'none'
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.picUrl + "?param=50y50";
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = song.name;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.dj.nickname
            artistNamesElement.classList.add('song-artist');

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.addEventListener('click', () => playRadio(song.id, 1));
            searchRadioElement.appendChild(li);
        });
    }

    function displayArtist(songs) {
        searchArtistShowElement.innerHTML = ''
        backArtistButton.style.display = 'none';
        document.getElementById('songArtist').style.display = 'block'
        document.getElementById('songArtistShow').style.display = 'none'
        songs.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.picUrl + "?param=50y50";
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = `${song.name}`;
            songNameElement.classList.add('song-name');

            infoDiv.appendChild(songNameElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.addEventListener('click', () => playArtist(song.id, 1));
            searchArtistElement.appendChild(li);
        });
    }

    function displayVideos(videos, p_status) {
        videos.forEach(song => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = song.pic; // 'http://z.iirose.com/lib/php/function/loadImg.php?s=' +
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = song.title;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = song.auther;
            artistNamesElement.classList.add('song-artist');

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            li.addEventListener('click', () => playVideo(song.bvid, song.auther, song.title, song));

            resultsBilibiliElement.appendChild(li);
        });
    }

    function displayFavorite() {
        // 自适应ui
        setTimeout(function() {
            tabaTab.style.cssText = `top: ${tabHeader.offsetHeight.toString()}px;`
            tabTab.style.cssText = `top: ${(tabTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
            qqTab.style.cssText = `top: ${(tabHeader.offsetHeight + tabaTab.offsetHeight).toString()}px`
            qqtabSearch.style.cssText = `background-color: #2c2c2c;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
            songTypeTab.style.cssText = `top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px`
            tabSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
            tabSearchSongList.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
            tabAlbumSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
            tabRadioSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
            tabArtistSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabTab.offsetHeight + tabaTab.offsetHeight + tabHeader.offsetHeight + songTypeTab.offsetHeight).toString()}px;`
            tabBilibiliSearch.style.cssText = `background-color: #2c2c2c;display: flex;top: 87px;top: ${(tabaTab.offsetHeight + tabHeader.offsetHeight).toString()}px;`
        }, 1);

        // 网易云和qq音乐的收藏加载以及favList favQQList变量初始化
        if (localStorage.getItem('xc-favoriteList') !== null) {
            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
            if (Object.keys(favList).length !== 0) {
                favoriteElement.innerHTML = '';

                Object.keys(favList).forEach(key => {
                    let song = favList[key]
                    const li = document.createElement('li');
                    li.classList.add('song-item');

                    const coverImg = document.createElement('img');
                    coverImg.src = song.pic;
                    coverImg.classList.add('song-cover');
                    coverImg.setAttribute('loading', 'lazy');
                    coverImg.setAttribute('decoding', 'async');

                    const infoDiv = document.createElement('div');
                    infoDiv.classList.add('song-info');

                    const songNameElement = document.createElement('h3');
                    songNameElement.textContent = song.name;
                    songNameElement.classList.add('song-name');

                    const artistNamesElement = document.createElement('p');
                    artistNamesElement.textContent = song.auther;
                    artistNamesElement.classList.add('song-artist');

                    const favoriteContainer = document.createElement('div');
                    favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式

                    if (song.id in favList) {
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('favorited');
                    } else {
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    }
                    favoriteContainer.addEventListener('click', (event) => {
                        event.stopPropagation();
                        if (localStorage.getItem('xc-favoriteList') !== null) {
                            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                        } else {
                            favList = {}
                        }

                        if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                            delete favList[song.id]
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                            favoriteContainer.classList.remove('favorited');
                            BS.send(song.id, "deleteNeteaseFavorites")
                            _alert(`取消收藏歌曲：${song.name}`);
                            li.parentNode.removeChild(li);
                        } else {
                            favList[song.id] = {
                                id: song.id,
                                name: song.name,
                                auther: song.auther,
                                pic: song.al.pic,
                            }
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('favorited');
                            BS.send(favList[song.id], "appendNeteaseFavorites", true)
                            _alert(`已收藏歌曲：${song.name}`);
                        }
                        localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                        displayFavorite();
                    });

                    infoDiv.appendChild(songNameElement);
                    infoDiv.appendChild(artistNamesElement);

                    li.appendChild(coverImg);
                    li.appendChild(infoDiv);

                    li.appendChild(favoriteContainer);

                    li.addEventListener('click', () => playSong(song.id));
                    favoriteElement.appendChild(li);
                });
            }
        }

        if (localStorage.getItem('xc-favoriteQQList') !== null) {
            favQQList =JSON.parse(localStorage.getItem('xc-favoriteQQList'))
            if (Object.keys(favQQList).length !== 0) {
                favoriteQQElement.innerHTML = '';

                Object.keys(favQQList).forEach(key => {
                    let song = favQQList[key]
                    const li = document.createElement('li');
                    li.classList.add('song-item');

                    const coverImg = document.createElement('img');
                    coverImg.src = song.pic;
                    coverImg.classList.add('song-cover');
                    coverImg.setAttribute('loading', 'lazy');
                    coverImg.setAttribute('decoding', 'async');

                    const infoDiv = document.createElement('div');
                    infoDiv.classList.add('song-info');

                    const songNameElement = document.createElement('h3');
                    songNameElement.textContent = song.name;
                    songNameElement.classList.add('song-name');

                    const artistNamesElement = document.createElement('p');
                    artistNamesElement.textContent = song.auther;
                    artistNamesElement.classList.add('song-artist');

                    const favoriteContainer = document.createElement('div');
                    favoriteContainer.classList.add('favorite-btn');
                    if (song.id in favQQList) {
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('favorited');
                    } else {
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    }
                    favoriteContainer.addEventListener('click', (event) => {
                        event.stopPropagation();
                        if (localStorage.getItem('xc-favoriteQQList') !== null) {
                            favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                        } else {
                            favQQList = {}
                        }

                        if (favoriteContainer.classList.contains('favorited') && song.id in favQQList) {
                            delete favQQList[song.id]
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                            favoriteContainer.classList.remove('favorited');
                            BS.send(song.id, "deleteQQFavorites")
                            _alert(`取消收藏歌曲：${song.name}`);
                            li.parentNode.removeChild(li);
                        }
                        localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));
                        displayFavorite();
                    });

                    infoDiv.appendChild(songNameElement);
                    infoDiv.appendChild(artistNamesElement);

                    li.appendChild(coverImg);
                    li.appendChild(infoDiv);

                    li.appendChild(favoriteContainer);

                    li.addEventListener('click', () => playQQSong(song.id, song.mediaId));
                    favoriteQQElement.appendChild(li);
                });
            }
        }

        // 获取历史
        if (localStorage.getItem('xc-historyPlays') !== null) {
            historyPlays =JSON.parse(localStorage.getItem('xc-historyPlays'))
            if (historyPlays.length > 100) {
                historyPlays = historyPlays.slice(0, 100);
            }
            localStorage.setItem('xc-historyPlays', JSON.stringify(historyPlays));
        } else {
            historyPlays = []
        }

        // 清空历史
        mediaListElement.innerHTML = '';

        // 添加历史媒体
        historyPlays.forEach(media => {
            const li = document.createElement('li');
            li.classList.add('song-item');

            const coverImg = document.createElement('img');
            coverImg.src = media.pic;
            coverImg.classList.add('song-cover');
            coverImg.setAttribute('loading', 'lazy');
            coverImg.setAttribute('decoding', 'async');

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('song-info');

            const songNameElement = document.createElement('h3');
            songNameElement.textContent = media.name;
            songNameElement.classList.add('song-name');

            const artistNamesElement = document.createElement('p');
            artistNamesElement.textContent = media.author;
            artistNamesElement.classList.add('song-artist');

            const bilibiliIcon = document.createElement('img');
            bilibiliIcon.setAttribute('decoding', 'async');
            bilibiliIcon.setAttribute('loading', 'lazy');
            bilibiliIcon.setAttribute('src', 'https://static.codemao.cn/rose/v0/images/system/media/video/bilibili/ic_launcher.png');
            bilibiliIcon.setAttribute('style', 'float:right;height: 13px;width: 13px;');

            var neteaseIcon = document.createElement('img');
            neteaseIcon.setAttribute('decoding', 'async');
            neteaseIcon.setAttribute('loading', 'lazy');
            neteaseIcon.setAttribute('src', 'https://static.codemao.cn/rose/v0/images/system/media/music/NeteaseMusic/logo.png');
            neteaseIcon.setAttribute('style', 'float:right;height: 13px;width: 13px;');

            var qqIcon = document.createElement('img');
            qqIcon.setAttribute('decoding', 'async');
            qqIcon.setAttribute('loading', 'lazy');
            qqIcon.setAttribute('src', 'https://static.codemao.cn/rose/v0/images/system/media/music/QQMusic/logo.png');
            qqIcon.setAttribute('style', 'float:right;height: 13px;width: 13px;');

            const favoriteContainer = document.createElement('div');
            if (media.type === '@0') {
                favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                if (media.id in favList) {
                    favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;padding-top: 15%;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                    favoriteContainer.classList.add('favorited');
                } else {
                    favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;padding-top: 15%;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                }

                favoriteContainer.addEventListener('click', (event) => {
                    event.stopPropagation();
                    if (localStorage.getItem('xc-favoriteList') !== null) {
                        favList = JSON.parse(localStorage.getItem('xc-favoriteList'))
                    } else {
                        favList = {}
                    }

                    if (media.id in favList) {
                        delete favList[media.id]
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;padding-top: 15%;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                        favoriteContainer.classList.remove('favorited');
                        BS.send(media.id, "deleteNeteaseFavorites")
                        _alert(`取消收藏歌曲：${media.name}`);
                    } else {
                        favList[media.id] = {
                            id: media.id,
                            name: media.name,
                            auther: media.author,
                            pic: media.pic,
                        }
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;padding-top: 15%;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('favorited');
                        BS.send(favList[media.id], "appendNeteaseFavorites", true)
                        _alert(`已收藏歌曲：${media.name}`);
                    }

                    localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                    displayFavorite();
                });

                infoDiv.appendChild(neteaseIcon);
                favoriteContainer.style.float = 'right';
                infoDiv.appendChild(favoriteContainer)
                li.addEventListener('click', () => playSong(media.id));
            } else if (media.type === '!3') {
                infoDiv.appendChild(bilibiliIcon);
                let song_date = {
                    "pic": media.pic,
                    "title": media.name,
                    "auther": media.author,
                    "bvid": media.id
                }
                li.addEventListener('click', () => playVideo(media.id, media.author, media.name, song_date))
            }  else if (media.type === '@2') {
                favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式

                if (media.id in favQQList) {
                    favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;padding-top: 15%;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                    favoriteContainer.classList.add('favorited');
                } else {
                    favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;padding-top: 15%;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                }
                favoriteContainer.addEventListener('click', (event) => {
                    event.stopPropagation();
                    if (localStorage.getItem('xc-favoriteQQList') !== null) {
                        favQQList =JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                    } else {
                        favQQList = {}
                    }

                    if (media.id in favQQList) {
                        delete favQQList[media.id]
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;padding-top: 15%;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                        favoriteContainer.classList.remove('favorited');
                        BS.send(media.id, "deleteQQFavorites")
                        _alert(`取消收藏歌曲：${media.name}`);
                    } else {
                        favQQList[media.id] = {
                            id: media.id,
                            name: media.name,
                            auther: media.author,
                            pic: media.pic,
                        }
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;padding-top: 15%;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('favorited');
                        BS.send(favQQList[media.id], "appendQQFavorites", true)
                        _alert(`已收藏歌曲：${media.name}`);
                    }

                    localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));
                    displayFavorite();
                });

                infoDiv.appendChild(qqIcon);
                favoriteContainer.style.float = 'right';
                infoDiv.appendChild(favoriteContainer)
                li.addEventListener('click', () => playQQSong(media.id));
            }

            infoDiv.appendChild(songNameElement);
            infoDiv.appendChild(artistNamesElement);

            li.appendChild(coverImg);
            li.appendChild(infoDiv);

            mediaListElement.appendChild(li);
        });
    }

    var topNum = 0
    var top_data_status = true

    var qqtopNum = 0
    var qqtop_data_status = true
    // 排行榜
    function displayQQTop() {
        if (localStorage.getItem('xc-favoriteQQList') !== null) {
            favQQList =JSON.parse(localStorage.getItem('xc-favoriteQQList'))
        } else {
            favQQList = {}
        }

        qqtopNum += 1

        fetch(`https://xc.null.red:8043/music/qq/top?page=${qqtopNum}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                if (data.error !== undefined) {
                    qqtop_data_status = false
                    return;
                }

                data.songs.forEach(song => {
                    const li = document.createElement('li');
                    li.classList.add('song-item');

                    const coverImg = document.createElement('img');
                    coverImg.src = song.song_pic;
                    coverImg.classList.add('song-cover');
                    coverImg.setAttribute('loading', 'lazy');
                    coverImg.setAttribute('decoding', 'async');

                    const infoDiv = document.createElement('div');
                    infoDiv.classList.add('song-info');

                    const songNameElement = document.createElement('h3');
                    songNameElement.textContent = song.song_name;
                    songNameElement.classList.add('song-name');

                    const artistNamesElement = document.createElement('p');
                    artistNamesElement.textContent = song.song_auther;
                    artistNamesElement.classList.add('song-artist');

                    if (localStorage.getItem('xc-favoriteQQList') !== null) {
                        favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                    } else {
                        favQQList = {}
                    }

                    const favoriteContainer = document.createElement('div');
                    favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                    if (song.song_id in favQQList) {
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('QQfavorites');
                    } else {
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    }
                    favoriteContainer.addEventListener('click', (event) => {
                        event.stopPropagation();
                        if (localStorage.getItem('xc-favoriteQQList') !== null) {
                            favQQList = JSON.parse(localStorage.getItem('xc-favoriteQQList'))
                        } else {
                            favQQList = {}
                        }

                        if (favoriteContainer.classList.contains('QQfavorites') && song.song_id in favQQList) {
                            delete favQQList[song.song_id]
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                            favoriteContainer.classList.remove('QQfavorites');
                            BS.send(song.song_id, "deleteQQFavorites")
                            _alert(`取消收藏歌曲：${song.song_name}`);
                        } else {
                            favQQList[song.songmid] = {
                                id: song.song_id,
                                name: song.song_name,
                                auther: song.song_auther,
                                mediaId: undefined,
                                pic: song.song_pic,
                            }
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('QQfavorites');
                            BS.send(favQQList[song.song_id], "appendQQFavorites", true)
                            _alert(`已收藏歌曲：${song.song_name}`);
                        }
                        localStorage.setItem('xc-favoriteQQList', JSON.stringify(favQQList));
                        displayFavorite();
                    });

                    infoDiv.appendChild(songNameElement);
                    infoDiv.appendChild(artistNamesElement);

                    li.appendChild(coverImg);
                    li.appendChild(infoDiv);

                    li.appendChild(favoriteContainer);

                    li.addEventListener('click', () => playQQSong(song.song_id));
                    topQQElement.appendChild(li);
                });
            })
            .catch(error => {
                console.log(error)
                _alert(`加载QQ热榜失败，请检查网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function displayTop() {
        if (localStorage.getItem('xc-favoriteList') !== null) {
            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
        } else {
            favList = {}
        }

        topNum += 1
        fetch(`https://xc.null.red:8043/meting-api/top?page=${topNum}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                if (data.error !== undefined) {
                    top_data_status = false
                    return;
                }

                data.songs.forEach(song => {
                    if (song.song_pic === '') {
                        song.song_pic = 'https://static.codemao.cn/rose/v0/images/system/demandAlbumLarge.png'
                    }
                    const li = document.createElement('li');
                    li.classList.add('song-item');

                    const coverImg = document.createElement('img');
                    coverImg.src = song.song_pic;
                    coverImg.classList.add('song-cover');
                    coverImg.setAttribute('loading', 'lazy');
                    coverImg.setAttribute('decoding', 'async');

                    const infoDiv = document.createElement('div');
                    infoDiv.classList.add('song-info');

                    const songNameElement = document.createElement('h3');
                    songNameElement.textContent = song.song_name;
                    songNameElement.classList.add('song-name');

                    const artistNamesElement = document.createElement('p');
                    artistNamesElement.textContent = song.song_auther;
                    artistNamesElement.classList.add('song-artist');

                    const favoriteContainer = document.createElement('div');
                    favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                    if (song.song_id in favList) {
                        favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                        favoriteContainer.classList.add('favorited');
                    } else {
                        favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                    }
                    favoriteContainer.addEventListener('click', (event) => {
                        event.stopPropagation();
                        if (localStorage.getItem('xc-favoriteList') !== null) {
                            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                        } else {
                            favList = {}
                        }

                        if (favoriteContainer.classList.contains('favorited') && song.song_id in favList) {
                            delete favList[song.song_id]
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                            favoriteContainer.classList.remove('favorited');
                            BS.send(song.song_id, "deleteNeteaseFavorites")
                            _alert(`取消收藏歌曲：${song.song_name}`);
                        } else {
                            favList[song.song_id] = {
                                id: song.song_id,
                                name: song.song_name,
                                auther: song.song_auther,
                                pic: song.song_pic,
                            }
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('favorited');
                            BS.send(favList[song.song_id], "appendNeteaseFavorites", true)
                            _alert(`已收藏歌曲：${song.song_name}`);
                        }
                        localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                        displayFavorite();
                    });

                    infoDiv.appendChild(songNameElement);
                    infoDiv.appendChild(artistNamesElement);

                    li.appendChild(coverImg);
                    li.appendChild(infoDiv);

                    li.appendChild(favoriteContainer);

                    li.addEventListener('click', () => playSong(song.song_id));
                    topElement.appendChild(li);
                });
            })
            .catch(error => {
                _alert(`加载热榜失败，请检查网络是否通畅，也可能是服务器挂掉了`);
            });
    }

    function playSong(url, radio_id) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        _alert('解析中...')
        let radio_text
        if (radio_id !== undefined) {
            radio_text = `&radio=${radio_id}`
        } else {
            radio_text = ''
        }
        fetch(`https://xc.null.red:8043/meting-api/?id=${url}&type=302${radio_text}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                if (data.url === null) {
                    _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`)
                    return;
                }

                if (data.vip_level === 4) {
                    _alert(`歌曲 ${data.name} 暂无版权。`)
                    return;
                }

                if (data.code === 200) {
                    let lry_data

                    switch (getSelectedLryType().toString()) {
                        case '0':
                            lry_data = data.lrc_control
                            break;
                        case '1':
                            lry_data = data.lrc
                            break
                        case '2':
                            lry_data = data.lrc_translation
                            break
                        case '3':
                            lry_data = ''
                            break
                    }

                    let media_json = {
                        "s": data.url.substring(4),
                        "d": data.time / 1000,
                        "c": data.pic.substring(4),
                        "n": data.name,
                        "r": data.auther,
                        "b": "@0",
                        "o": `s://music.163.com/#/song?id=${data.id}`,
                        "l": lry_data
                    }

                    socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`)
                    if (!send_media_card.checked) {
                        getImageAverageColor(data.pic, function(averageColor) {
                            let mValue = `m__4@0>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                            let card_json = {
                                "m": mValue,
                                "mc": averageColor,
                                "i": Math.random().toString().slice(2, 14)
                            };
                            socket.send(JSON.stringify(card_json))
                        });
                    }
                    _alert(`歌曲 ${data.name} 解析成功！`)
                } else {
                    _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`)
                }
            })
    }

    function playQQSong(url, mediaId) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        _alert('解析中...')
        let media_id
        if (mediaId !== undefined) {
            media_id = `&media_id=${mediaId}`
        } else {
            media_id = ''
        }
        fetch(`https://xc.null.red:8043/music/qq/?id=${url}&type=302${media_id}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                if (data.url === null) {
                    _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`)
                    return;
                }

                if (data.code === 200) {
                    let lry_data

                    switch (getSelectedLryType().toString()) {
                        case '0':
                            lry_data = data.lrc_control
                            break;
                        case '1':
                            lry_data = data.lrc
                            break
                        case '2':
                            lry_data = data.lrc_translation
                            break
                        case '3':
                            lry_data = ''
                            break
                    }

                    let media_json = {
                        "s": data.url.substring(4),
                        "d": data.time / 1000,
                        "c": data.pic.substring(4),
                        "n": data.name,
                        "r": data.auther,
                        "b": "@2",
                        "o": `s://y.qq.com/n/ryqq/songDetail/${data.id}`,
                        "l": lry_data
                    }

                    socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`)
                    if (!send_media_card.checked) {
                        getImageAverageColor(data.pic, function(averageColor) {
                            let mValue = `m__4@2>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                            let card_json = {
                                "m": mValue,
                                "mc": averageColor,
                                "i": Math.random().toString().slice(2, 14)
                            };
                            socket.send(JSON.stringify(card_json))
                        });
                    }
                    _alert(`歌曲 ${data.name} 解析成功！`)
                } else {
                    _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`)
                }
            })
    }

    function updateProgressBar(completed, total, width, char, send) {
        const progress = Math.round((completed / total) * width);
        const progressBar = char.repeat(progress) + '░'.repeat(width - progress);
        if (send) {
            _alert(`${progressBar}\n进度  :  ${(completed / total * 100).toFixed(2)}%  -  ${completed} / ${total}`)
        } else {
            API.send(`${progressBar}\n进度  :  ${(completed / total * 100).toFixed(2)}%  -  ${completed} / ${total}`)
        }
    }
    var songListStatus = {"play": false, "stop": false}
    async function playSongList(url, trackCount, play_type, disorderly) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        var re_num
        switch (play_type) {
            case 0:
                _alert('解析中...')
                re_num = (trackCount / 1000) + 1
                for (let i = 1; i < re_num; i++) {
                    const response = await fetch(`https://xc.null.red:8043/api/netease/playlist/track/all?id=${url}&limit=${i * 1000}&offset=${i * 1000 - 1000}&_=${Date.now()}`);
                    const data = await response.json();
                    if (data.code === 200) {
                        let completedCount = 0;

                        if (disorderly === true) {
                            data.songs = shuffle(data.songs);
                        }

                        for (const song of data.songs) {
                            try {
                                if (songListStatus['stop'] === true) {
                                    _alert("已停止解析当前歌单！")
                                    break;
                                }
                                songListStatus['play'] = true
                                const response = await fetch(`https://xc.null.red:8043/meting-api/?id=${song.id}&type=302&_=${Date.now()}`);
                                const data = await response.json();

                                if (!send_media_card.checked) {
                                    updateProgressBar(++completedCount, trackCount, 10, '▇', false);
                                } else {
                                    updateProgressBar(++completedCount, trackCount, 10, '▇', true);
                                }

                                if (data.url === null) {
                                    _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`);
                                    continue;
                                }

                                if (data.code === 200) {
                                    let lry_data;

                                    switch (getSelectedLryType().toString()) {
                                        case '0':
                                            lry_data = data.lrc_control;
                                            break;
                                        case '1':
                                            lry_data = data.lrc;
                                            break;
                                        case '2':
                                            lry_data = data.lrc_translation;
                                            break;
                                        case '3':
                                            lry_data = '';
                                            break;
                                    }

                                    let media_json = {
                                        "s": data.url.substring(4),
                                        "d": data.time / 1000,
                                        "c": data.pic.substring(4),
                                        "n": data.name,
                                        "r": data.auther,
                                        "b": "@0",
                                        "o": `s://music.163.com/#/song?id=${data.id}`,
                                        "l": lry_data
                                    };

                                    socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`);

                                    if (!send_media_card.checked) {
                                        getImageAverageColor(data.pic, function (averageColor) {
                                            let mValue = `m__4@0>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                                            let card_json = {
                                                "m": mValue,
                                                "mc": averageColor,
                                                "i": Math.random().toString().slice(2, 14)
                                            };
                                            socket.send(JSON.stringify(card_json));
                                        });
                                    }
                                } else {
                                    _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`);
                                }
                            } catch (error) {
                                _alert(`解析歌曲时访问服务器失败，请检查网络后再试或等待服务器恢复`);
                            }
                        }
                        if (songListStatus['stop'] === true) {
                            songListStatus['stop'] = false
                            API.send('已停止解析当前歌单')
                        } else {
                            _alert('歌单解析完毕！')
                        }
                        songListStatus['play'] = false
                    } else {
                        _alert('歌单数据获取失败！')
                    }
                }
                break;
            case 1:
                searchSongListShowElement.innerHTML = ''

                {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '正序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playSongList(url, trackCount, 0));
                searchSongListShowElement.appendChild(li);}

                {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort-alphabetical-variant');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '乱序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playSongList(url, trackCount, 0, true));
                searchSongListShowElement.appendChild(li);}

                _alert('获取中...')
                re_num = (trackCount / 1000) + 1
                for (let i = 1; i < re_num; i++) {
                    const response = await fetch(`https://xc.null.red:8043/api/netease/playlist/track/all?id=${url}&limit=${i * 1000}&offset=${i * 1000 - 1000}&_=${Date.now()}`);
                    const data = await response.json();
                    if (data.code === 200) {
                        for (const song of data.songs) {
                            const li = document.createElement('li');
                            li.classList.add('song-item');

                            const coverImg = document.createElement('img');
                            coverImg.src = song.al.picUrl;
                            coverImg.classList.add('song-cover');
                            coverImg.setAttribute('loading', 'lazy');
                            coverImg.setAttribute('decoding', 'async');

                            const infoDiv = document.createElement('div');
                            infoDiv.classList.add('song-info');

                            const songNameElement = document.createElement('h3');
                            songNameElement.textContent = song.name;
                            songNameElement.classList.add('song-name');

                            const artistNamesElement = document.createElement('p');
                            artistNamesElement.textContent = song.ar.map(artist => artist.name).join(' & ');
                            artistNamesElement.classList.add('song-artist');

                            if (localStorage.getItem('xc-favoriteList') !== null) {
                                favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                            } else {
                                favList = {}
                            }

                            const favoriteContainer = document.createElement('div');
                            favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                            if (song.id in favList) {
                                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                                favoriteContainer.classList.add('favorited');
                            } else {
                                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                            }
                            favoriteContainer.addEventListener('click', (event) => {
                                event.stopPropagation();
                                if (localStorage.getItem('xc-favoriteList') !== null) {
                                    favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                                } else {
                                    favList = {}
                                }

                                if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                                    delete favList[song.id]
                                    favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                                    favoriteContainer.classList.remove('favorited');
                                    BS.send(song.id, "deleteNeteaseFavorites")
                                    _alert(`取消收藏歌曲：${song.name}`);
                                } else {
                                    favList[song.id] = {
                                        id: song.id,
                                        name: song.name,
                                        auther: song.ar.map(artist => artist.name).join(' & '),
                                        pic: song.al.picUrl,
                                    }
                                    favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                                    favoriteContainer.classList.add('favorited');
                                    BS.send(favList[song.id], "appendNeteaseFavorites", true)
                                    _alert(`已收藏歌曲：${song.name}`);
                                }
                                localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                                displayFavorite();
                            });

                            infoDiv.appendChild(songNameElement);
                            infoDiv.appendChild(artistNamesElement);

                            li.appendChild(coverImg);
                            li.appendChild(infoDiv);

                            li.appendChild(favoriteContainer);

                            li.addEventListener('click', () => playSong(song.id));
                            searchSongListShowElement.appendChild(li);
                        }
                    } else {
                        _alert('歌单数据获取失败！')
                    }
                }

                document.getElementById('songList').style.display = 'none'
                document.getElementById('songListShow').style.display = 'block'

                backSongListButton.style.display = 'block';
                break;
        }
    }

    async function playAlbum(url, play_type, disorderly) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        let response
        let data;
        switch (play_type) {
            case 0:
                _alert('解析中...')
                response = await fetch(`https://xc.null.red:8043/api/netease/album?id=${url}&limit=1000&_=${Date.now()}`);
                data = await response.json();
                if (data.code === 200) {
                    let completedCount = 0;

                    if (disorderly === true) {
                        data.songs = shuffle(data.songs);
                    }

                    const song_length = data.songs.length

                    for (const song of data.songs) {
                        try {
                            if (songListStatus['stop'] === true) {
                                _alert("已停止解析当前专辑！")
                                break;
                            }
                            songListStatus['play'] = true
                            const response = await fetch(`https://xc.null.red:8043/meting-api/?id=${song.id}&type=302&_=${Date.now()}`);
                            const data = await response.json();

                            if (!send_media_card.checked) {
                                updateProgressBar(++completedCount, song_length, 10, '▇', false);
                            } else {
                                updateProgressBar(++completedCount, song_length, 10, '▇', true);
                            }

                            if (data.url === null) {
                                _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`);
                                continue;
                            }

                            if (data.code === 200) {
                                let lry_data;

                                switch (getSelectedLryType().toString()) {
                                    case '0':
                                        lry_data = data.lrc_control;
                                        break;
                                    case '1':
                                        lry_data = data.lrc;
                                        break;
                                    case '2':
                                        lry_data = data.lrc_translation;
                                        break;
                                    case '3':
                                        lry_data = '';
                                        break;
                                }

                                let media_json = {
                                    "s": data.url.substring(4),
                                    "d": data.time / 1000,
                                    "c": data.pic.substring(4),
                                    "n": data.name,
                                    "r": data.auther,
                                    "b": "@0",
                                    "o": `s://music.163.com/#/song?id=${data.id}`,
                                    "l": lry_data
                                };

                                socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`);

                                if (!send_media_card.checked) {
                                    getImageAverageColor(data.pic, function (averageColor) {
                                        let mValue = `m__4@0>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                                        let card_json = {
                                            "m": mValue,
                                            "mc": averageColor,
                                            "i": Math.random().toString().slice(2, 14)
                                        };
                                        socket.send(JSON.stringify(card_json));
                                    });
                                }
                            } else {
                                _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`);
                            }
                        } catch (error) {
                            _alert(`解析歌曲时访问服务器失败，请检查网络后再试或等待服务器恢复`);
                        }
                    }
                    if (songListStatus['stop'] === true) {
                        songListStatus['stop'] = false
                        API.send('已停止解析当前专辑')
                    } else {
                        _alert('专辑解析完毕！')
                    }
                    songListStatus['play'] = false
                } else {
                    _alert('专辑数据获取失败！')
                }
                break;
            case 1:
                searchAlbumShowElement.innerHTML = ''

            {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '正序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playAlbum(url, 0));
                searchAlbumShowElement.appendChild(li);}

            {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort-alphabetical-variant');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '乱序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playAlbum(url, 0, true));
                searchAlbumShowElement.appendChild(li);}

                _alert('获取中...')
                response = await fetch(`https://xc.null.red:8043/api/netease/album?id=${url}&limit=1000&_=${Date.now()}`);
                data = await response.json();
                if (data.code === 200) {
                    for (const song of data.songs) {
                        const li = document.createElement('li');
                        li.classList.add('song-item');

                        const coverImg = document.createElement('img');
                        coverImg.src = data.album.picUrl;
                        coverImg.classList.add('song-cover');
                        coverImg.setAttribute('loading', 'lazy');
                        coverImg.setAttribute('decoding', 'async');

                        const infoDiv = document.createElement('div');
                        infoDiv.classList.add('song-info');

                        const songNameElement = document.createElement('h3');
                        songNameElement.textContent = song.name;
                        songNameElement.classList.add('song-name');

                        const artistNamesElement = document.createElement('p');
                        artistNamesElement.textContent = data.album.artists.map(artist => artist.name).join(' & ');
                        artistNamesElement.classList.add('song-artist');

                        if (localStorage.getItem('xc-favoriteList') !== null) {
                            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                        } else {
                            favList = {}
                        }

                        const favoriteContainer = document.createElement('div');
                        favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                        if (song.id in favList) {
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('favorited');
                        } else {
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                        }
                        favoriteContainer.addEventListener('click', (event) => {
                            event.stopPropagation();
                            if (localStorage.getItem('xc-favoriteList') !== null) {
                                favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                            } else {
                                favList = {}
                            }

                            if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                                delete favList[song.id]
                                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                                favoriteContainer.classList.remove('favorited');
                                BS.send(song.id, "deleteNeteaseFavorites")
                                _alert(`取消收藏歌曲：${song.name}`);
                            } else {
                                favList[song.id] = {
                                    id: song.id,
                                    name: song.name,
                                    auther: data.album.artists.map(artist => artist.name).join(' & '),
                                    pic: data.album.picUrl,
                                }
                                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                                favoriteContainer.classList.add('favorited');
                                BS.send(favList[song.id], "appendNeteaseFavorites", true)
                                _alert(`已收藏歌曲：${song.name}`);
                            }
                            localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                            displayFavorite();
                        });

                        infoDiv.appendChild(songNameElement);
                        infoDiv.appendChild(artistNamesElement);

                        li.appendChild(coverImg);
                        li.appendChild(infoDiv);

                        li.appendChild(favoriteContainer);

                        li.addEventListener('click', () => playSong(song.id));
                        searchAlbumShowElement.appendChild(li);
                    }
                } else {
                    _alert('专辑数据获取失败！')
                }

                document.getElementById('songAlbum').style.display = 'none'
                document.getElementById('songAlbumShow').style.display = 'block'

                backAlbumButton.style.display = 'block';
                break;
        }
    }

    async function playRadio(url, play_type, disorderly) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        let response
        let data;
        let trackCount;
        let re_num;

        switch (play_type) {
            case 0:
                _alert('解析中...')
                fetch(`https://xc.null.red:8043/api/netease/dj/program?rid=${url}&limit=1&_=${Date.now()}`)
                    .then(response => response.json())
                    .then(async data => {
                        trackCount = data.count;
                        re_num = (trackCount / 500) + 1
                        for (let i = 1; i < re_num; i++) {
                            if (songListStatus['stop'] === true) {
                                break;
                            }
                            response = await fetch(`https://xc.null.red:8043/api/netease/dj/program?rid=${url}&limit=500&offset=${(i - 1) * 500}&_=${Date.now()}`);
                            data = await response.json();
                            if (data.code === 200) {
                                let completedCount = 0;

                                if (disorderly === true) {
                                    data.programs = shuffle(data.programs);
                                }

                                for (const song of data.programs) {
                                    try {
                                        if (songListStatus['stop'] === true) {
                                            _alert("已停止解析当前电台！")
                                            break;
                                        }
                                        songListStatus['play'] = true
                                        const response = await fetch(`https://xc.null.red:8043/meting-api/?id=${song.mainSong.id}&type=302&_=${Date.now()}&radio=${song.id}`);
                                        const data = await response.json();

                                        if (!send_media_card.checked) {
                                            updateProgressBar(++completedCount, trackCount, 10, '▇', false);
                                        } else {
                                            updateProgressBar(++completedCount, trackCount, 10, '▇', true);
                                        }

                                        if (data.url === null) {
                                            _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`);
                                            continue;
                                        }

                                        if (data.code === 200) {
                                            let lry_data;

                                            switch (getSelectedLryType().toString()) {
                                                case '0':
                                                    lry_data = data.lrc_control;
                                                    break;
                                                case '1':
                                                    lry_data = data.lrc;
                                                    break;
                                                case '2':
                                                    lry_data = data.lrc_translation;
                                                    break;
                                                case '3':
                                                    lry_data = '';
                                                    break;
                                            }

                                            let media_json = {
                                                "s": data.url.substring(4),
                                                "d": data.time / 1000,
                                                "c": data.pic.substring(4),
                                                "n": data.name,
                                                "r": data.auther,
                                                "b": "@0",
                                                "o": `s://music.163.com/#/song?id=${data.id}`,
                                                "l": lry_data
                                            };

                                            socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`);

                                            if (!send_media_card.checked) {
                                                getImageAverageColor(data.pic, function (averageColor) {
                                                    let mValue = `m__4@0>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                                                    let card_json = {
                                                        "m": mValue,
                                                        "mc": averageColor,
                                                        "i": Math.random().toString().slice(2, 14)
                                                    };
                                                    socket.send(JSON.stringify(card_json));
                                                });
                                            }
                                        } else {
                                            _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`);
                                        }
                                    } catch (error) {
                                        _alert(`解析歌曲时访问服务器失败，请检查网络后再试或等待服务器恢复`);
                                    }
                                }
                            } else {
                                _alert('电台数据获取失败！')
                            }
                        }
                        if (songListStatus['stop'] === true) {
                            songListStatus['stop'] = false
                            API.send('已停止解析当前电台')
                        } else {
                            _alert('电台解析完毕！')
                        }
                        songListStatus['play'] = false
                    })
                break;
            case 1:
                searchRadioShowElement.innerHTML = ''

                {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '正序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playRadio(url, 0));
                searchRadioShowElement.appendChild(li);}

                {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort-alphabetical-variant');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '乱序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playRadio(url, 0, true));
                searchRadioShowElement.appendChild(li);}

                _alert('获取中...')
                response = await fetch(`https://xc.null.red:8043/api/netease/dj/program?rid=${url}&limit=1000&_=${Date.now()}`);
                data = await response.json();
                if (data.code === 200) {
                    for (const song of data.programs) {
                        const li = document.createElement('li');
                        li.classList.add('song-item');

                        const coverImg = document.createElement('img');
                        coverImg.src = song.coverUrl;
                        coverImg.classList.add('song-cover');
                        coverImg.setAttribute('loading', 'lazy');
                        coverImg.setAttribute('decoding', 'async');

                        const infoDiv = document.createElement('div');
                        infoDiv.classList.add('song-info');

                        const songNameElement = document.createElement('h3');
                        songNameElement.textContent = song.name;
                        songNameElement.classList.add('song-name');

                        const artistNamesElement = document.createElement('p');
                        artistNamesElement.textContent = song.mainSong.artists.map(artist => artist.name).join(' & ')
                        artistNamesElement.classList.add('song-artist');

                        if (localStorage.getItem('xc-favoriteList') !== null) {
                            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                        } else {
                            favList = {}
                        }

                        const favoriteContainer = document.createElement('div');
                        favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                        if (song.id in favList) {
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('favorited');
                        } else {
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                        }
                        favoriteContainer.addEventListener('click', (event) => {
                            event.stopPropagation();
                            if (localStorage.getItem('xc-favoriteList') !== null) {
                                favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                            } else {
                                favList = {}
                            }

                            if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                                delete favList[song.id]
                                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                                favoriteContainer.classList.remove('favorited');
                                BS.send(song.id, "deleteNeteaseFavorites")
                                _alert(`取消收藏歌曲：${song.name}`);
                            } else {
                                favList[song.id] = {
                                    id: song.id,
                                    name: song.name,
                                    auther: song.mainSong.artists.map(artist => artist.name).join(' & '),
                                    pic: song.coverUrl,
                                }
                                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                                favoriteContainer.classList.add('favorited');
                                BS.send(favList[song.id], "appendNeteaseFavorites", true)
                                _alert(`已收藏歌曲：${song.name}`);
                            }
                            localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                            displayFavorite();
                        });

                        infoDiv.appendChild(songNameElement);
                        infoDiv.appendChild(artistNamesElement);

                        li.appendChild(coverImg);
                        li.appendChild(infoDiv);

                        li.appendChild(favoriteContainer);

                        li.addEventListener('click', () => playSong(song.mainSong.id, song.id));
                        searchRadioShowElement.appendChild(li);
                    }
                } else {
                    _alert('电台数据获取失败！')
                }

                document.getElementById('songRadio').style.display = 'none'
                document.getElementById('songRadioShow').style.display = 'block'

                backRadioButton.style.display = 'block';
                break;
        }
    }

    async function playArtist(url, play_type, disorderly) {
        if (!shareVideoRoom) {
            if (!shareMusicRoom) {
                _alert("当前房间不支持")
                return;
            }
        }
        let response
        let data;
        switch (play_type) {
            case 0:
                _alert('解析中...')
                response = await fetch(`https://xc.null.red:8043/api/netease/artist/songs?id=${url}&limit=1000&_=${Date.now()}`);
                data = await response.json();
                if (data.code === 200) {
                    let completedCount = 0;

                    if (disorderly === true) {
                        data.songs = shuffle(data.songs);
                    }

                    const song_length = data.songs.length

                    for (const song of data.songs) {
                        try {
                            if (songListStatus['stop'] === true) {
                                _alert("已停止解析当前歌手！")
                                break;
                            }
                            songListStatus['play'] = true
                            const response = await fetch(`https://xc.null.red:8043/meting-api/?id=${song.id}&type=302&_=${Date.now()}`);
                            const data = await response.json();

                            if (!send_media_card.checked) {
                                updateProgressBar(++completedCount, song_length, 10, '▇', false);
                            } else {
                                updateProgressBar(++completedCount, song_length, 10, '▇', true);
                            }

                            if (data.url === null) {
                                _alert(`歌曲 ${data.name} 解析失败，可能无版权或为付费专辑。`);
                                continue;
                            }

                            if (data.code === 200) {
                                let lry_data;

                                switch (getSelectedLryType().toString()) {
                                    case '0':
                                        lry_data = data.lrc_control;
                                        break;
                                    case '1':
                                        lry_data = data.lrc;
                                        break;
                                    case '2':
                                        lry_data = data.lrc_translation;
                                        break;
                                    case '3':
                                        lry_data = '';
                                        break;
                                }

                                let media_json = {
                                    "s": data.url.substring(4),
                                    "d": data.time / 1000,
                                    "c": data.pic.substring(4),
                                    "n": data.name,
                                    "r": data.auther,
                                    "b": "@0",
                                    "o": `s://music.163.com/#/song?id=${data.id}`,
                                    "l": lry_data
                                };

                                socket.send(`&${shareMusicRoom ? "0" : "1"}${JSON.stringify(media_json)}`);

                                if (!send_media_card.checked) {
                                    getImageAverageColor(data.pic, function (averageColor) {
                                        let mValue = `m__4@0>${escapeHTML(data.name)}>${escapeHTML(data.auther)}>${data.pic}>${averageColor}>${Math.floor(data.br / 1000)}`;
                                        let card_json = {
                                            "m": mValue,
                                            "mc": averageColor,
                                            "i": Math.random().toString().slice(2, 14)
                                        };
                                        socket.send(JSON.stringify(card_json));
                                    });
                                }
                            } else {
                                _alert(`歌曲 ${data.name} 解析失败！该歌曲可能为付费专辑或暂无版权，也可能是服务器抽了`);
                            }
                        } catch (error) {
                            _alert(`解析歌曲时访问服务器失败，请检查网络后再试或等待服务器恢复`);
                        }
                    }
                    if (songListStatus['stop'] === true) {
                        songListStatus['stop'] = false
                        API.send('已停止解析当前歌手')
                    } else {
                        _alert('歌手解析完毕！')
                    }
                    songListStatus['play'] = false
                } else {
                    _alert('歌手数据获取失败！')
                }
                break;
            case 1:
            searchArtistShowElement.innerHTML = ''

            {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '正序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playArtist(url, 0));
                searchArtistShowElement.appendChild(li);}

            {const li = document.createElement('li');
                li.classList.add('song-item');
                const coverImg = document.createElement('span');
                coverImg.classList.add('mdi-sort-alphabetical-variant');
                coverImg.style.cssText = "color: #209cb1;font-family: md;font-size: 46px;padding-right: 10px;"
                const infoDiv = document.createElement('div');
                infoDiv.classList.add('song-info');
                const songNameElement = document.createElement('h3');
                songNameElement.textContent = '乱序点播所有';
                songNameElement.classList.add('song-name');
                infoDiv.appendChild(songNameElement);
                li.appendChild(coverImg);
                li.appendChild(infoDiv);
                li.addEventListener('click', () => playArtist(url, 0, true));
                searchArtistShowElement.appendChild(li);}

                _alert('获取中...')
                response = await fetch(`https://xc.null.red:8043/api/netease/artist/songs?id=${url}&limit=1000&_=${Date.now()}`);
                data = await response.json();
                if (data.code === 200) {
                    for (const song of data.songs) {
                        const li = document.createElement('li');
                        li.classList.add('song-item');

                        const coverImg = document.createElement('img');
                        coverImg.src = `https://xc.null.red:8043/meting-api/song/pic/url?pic_id=${song.al.pic_str}`;
                        coverImg.classList.add('song-cover');
                        coverImg.setAttribute('loading', 'lazy');
                        coverImg.setAttribute('decoding', 'async');

                        const infoDiv = document.createElement('div');
                        infoDiv.classList.add('song-info');

                        const songNameElement = document.createElement('h3');
                        songNameElement.textContent = song.name;
                        songNameElement.classList.add('song-name');

                        const artistNamesElement = document.createElement('p');
                        artistNamesElement.textContent = song.ar.map(artist => artist.name).join(' & ');
                        artistNamesElement.classList.add('song-artist');

                        if (localStorage.getItem('xc-favoriteList') !== null) {
                            favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                        } else {
                            favList = {}
                        }

                        const favoriteContainer = document.createElement('div');
                        favoriteContainer.classList.add('favorite-btn'); // 添加类名以便于应用样式
                        if (song.id in favList) {
                            favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                            favoriteContainer.classList.add('favorited');
                        } else {
                            favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                        }
                        favoriteContainer.addEventListener('click', (event) => {
                            event.stopPropagation();
                            if (localStorage.getItem('xc-favoriteList') !== null) {
                                favList =JSON.parse(localStorage.getItem('xc-favoriteList'))
                            } else {
                                favList = {}
                            }

                            if (favoriteContainer.classList.contains('favorited') && song.id in favList) {
                                delete favList[song.id]
                                favoriteContainer.innerHTML = `<svg t="1709447132194" class="icon" style="padding-right: 10px;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2728" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24zM551.786667 756.032l170.976 106.24c2.624 1.621333 5.717333 2.122667 8.650666 1.408 6.410667-1.557333 10.56-8.426667 8.928-15.424l-46.485333-198.24a77.141333 77.141333 0 0 1 24.277333-75.733333L870.293333 441.706667c2.485333-2.165333 4.053333-5.312 4.330667-8.746667 0.565333-7.136-4.490667-13.173333-10.976-13.696l-199.712-16.288a75.989333 75.989333 0 0 1-64.064-47.168l-76.938667-188.16a12.309333 12.309333 0 0 0-6.538666-6.741333c-5.898667-2.496-12.725333 0.373333-15.328 6.741333l-76.949334 188.16a75.989333 75.989333 0 0 1-64.064 47.168l-199.701333 16.288a11.68 11.68 0 0 0-7.978667 4.181333 13.226667 13.226667 0 0 0 1.333334 18.261334l152.16 132.586666a77.141333 77.141333 0 0 1 24.277333 75.733334l-46.485333 198.229333a13.333333 13.333333 0 0 0 1.514666 9.877333c3.488 5.792 10.581333 7.530667 16.064 4.128l170.986667-106.229333a75.296 75.296 0 0 1 79.562667 0z" fill="#209cb1" p-id="2729"></path></svg>`;
                                favoriteContainer.classList.remove('favorited');
                                BS.send(song.id, "deleteNeteaseFavorites")
                                _alert(`取消收藏歌曲：${song.name}`);
                            } else {
                                favList[song.id] = {
                                    id: song.id,
                                    name: song.name,
                                    auther: song.ar.map(artist => artist.name).join(' & '),
                                    pic: `https://xc.null.red:8043/meting-api/song/pic/url?pic_id=${song.al.pic_str}`
                                }
                                favoriteContainer.innerHTML = `<svg t="1709448499286" class="icon" style="padding-right: 10px;"  viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3098" width="32" height="32"><path d="M335.008 916.629333c-35.914667 22.314667-82.88 10.773333-104.693333-25.557333a77.333333 77.333333 0 0 1-8.96-57.429333l46.485333-198.24a13.141333 13.141333 0 0 0-4.021333-12.864l-152.16-132.586667c-31.605333-27.52-35.253333-75.648-8.234667-107.733333a75.68 75.68 0 0 1 51.733333-26.752L354.848 339.2c4.352-0.362667 8.245333-3.232 10.026667-7.594667l76.938666-188.170666c16.032-39.2 60.618667-57.92 99.52-41.461334a76.309333 76.309333 0 0 1 40.832 41.461334l76.938667 188.16c1.781333 4.373333 5.674667 7.253333 10.026667 7.605333l199.712 16.277333c41.877333 3.413333 72.885333 40.458667 69.568 82.517334a76.938667 76.938667 0 0 1-26.08 51.978666l-152.16 132.586667c-3.541333 3.082667-5.141333 8.074667-4.021334 12.853333l46.485334 198.24c9.621333 41.013333-15.36 82.336-56.138667 92.224a75.285333 75.285333 0 0 1-57.525333-9.237333l-170.976-106.24a11.296 11.296 0 0 0-12.010667 0l-170.986667 106.24z" fill="#209cb1" p-id="3099"></path></svg>`;
                                favoriteContainer.classList.add('favorited');
                                BS.send(favList[song.id], "appendNeteaseFavorites", true)
                                _alert(`已收藏歌曲：${song.name}`);
                            }
                            localStorage.setItem('xc-favoriteList', JSON.stringify(favList));
                            displayFavorite();
                        });

                        infoDiv.appendChild(songNameElement);
                        infoDiv.appendChild(artistNamesElement);

                        li.appendChild(coverImg);
                        li.appendChild(infoDiv);

                        li.appendChild(favoriteContainer);

                        li.addEventListener('click', () => playSong(song.id));
                        searchArtistShowElement.appendChild(li);
                    }
                } else {
                    _alert('歌手数据获取失败！')
                }

                document.getElementById('songArtist').style.display = 'none'
                document.getElementById('songArtistShow').style.display = 'block'

                backArtistButton.style.display = 'block';
                break;
        }
    }

    function playVideo(bvid, author, title, video_date, cid_info) {
        if (!shareVideoRoom) {
            _alert("当前房间不支持")
            return;
        }
        if (cid_info) {
            _alert('解析中...')
            if (bilibili_dash.checked) {
                fetch(`https://xc.null.red:8043/api/bilibili/video/url?bvid=${bvid}&cid=${cid_info.cid}&type=302&dash=true&title=${title}&author=${author}&_=${Date.now()}`) // &dash=true
                    .then(response => response.json())
                    .then(data => {
                        if (data.videoUrl !== null && data.audioUrl !== null) { // (data.videoUrl !== null && data.audioUrl !== null)
                            let media_json = {
                                "s": `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`, // `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`
                                "d": data.length / 1000,
                                "c": data.pic.substring(4),
                                "n": `P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title})`,
                                "r": author,
                                "o": `s://www.bilibili.com/video/${bvid}?p=${cid_info.page.toString()}`,
                                "b": "!3"
                            }

                            socket.send('&1' + JSON.stringify(media_json))
                            if (!send_media_card.checked) {
                                let media_time = data.length / 1000
                                let minutes = Math.floor(media_time / 60);
                                let seconds = Math.floor(media_time) % 60;
                                let time_format = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                                getImageAverageColor(data.pic, function(averageColor) {
                                    let mValue = `m__4*3>${escapeHTML(`P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title})`)}>${escapeHTML(author)}>${data.pic}>${averageColor}>>${data.quality}>>${time_format}`;
                                    let card_json = {
                                        "m": mValue,
                                        "mc": averageColor,
                                        "i": Math.random().toString().slice(2, 14)
                                    };
                                    socket.send(JSON.stringify(card_json))
                                });
                            }

                            _alert(`视频 P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title}) 解析成功！`)
                        } else {
                            _alert(`视频 P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title}) 解析失败！请稍后再试`)
                        }
                    })
            } else {
                fetch(`https://xc.null.red:8043/api/bilibili/video/url?bvid=${bvid}&cid=${cid_info.cid}&type=302&title=${title}&author=${author}&_=${Date.now()}`) // &dash=true
                    .then(response => response.json())
                    .then(data => {
                        if (data.url !== null) { // (data.videoUrl !== null && data.audioUrl !== null)
                            let media_json = {
                                "s": data.url.substring(4), // `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`
                                "d": data.length / 1000,
                                "c": data.pic.substring(4),
                                "n": `P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title})`,
                                "r": author,
                                "o": `s://www.bilibili.com/video/${bvid}?p=${cid_info.page.toString()}`,
                                "b": "!3"
                            }

                            socket.send('&1' + JSON.stringify(media_json))
                            if (!send_media_card.checked) {
                                let media_time = data.length / 1000
                                let minutes = Math.floor(media_time / 60);
                                let seconds = Math.floor(media_time) % 60;
                                let time_format = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                                getImageAverageColor(data.pic, function (averageColor) {
                                    let mValue = `m__4*3>${escapeHTML(`P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title})`)}>${escapeHTML(author)}>${data.pic}>${averageColor}>>${data.quality}>>${time_format}`;
                                    let card_json = {
                                        "m": mValue,
                                        "mc": averageColor,
                                        "i": Math.random().toString().slice(2, 14)
                                    };
                                    socket.send(JSON.stringify(card_json))
                                });
                            }

                            _alert(`视频 P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title}) 解析成功！`)
                        } else {
                            _alert(`视频 P${cid_info.page.toString()}: ${cid_info.part.toString()} (${title}) 解析失败！请稍后再试`)
                        }
                    })
            }
            return
        }
        _alert('获取中...')
        fetch(`https://xc.null.red:8043/api/bilibili/video/cid?bvid=${bvid}&_=${Date.now()}`)
            .then(response => response.json())
            .then(data => {
                const p_date = data.data.length
                if (p_date > 1) {
                    document.getElementById('biliListVideo').style.display = 'none'
                    document.getElementById('biliListP').style.display = 'block'

                    resultsBilibiliPElement.innerHTML = ''
                    backBilibiliButton.style.display = 'block';

                    data.data.forEach(cid_date => {
                        const li = document.createElement('li');
                        li.classList.add('song-item');

                        const coverImg = document.createElement('img');
                        coverImg.src = video_date.pic; // 'http://z.iirose.com/lib/php/function/loadImg.php?s=' +
                        coverImg.classList.add('song-cover');
                        coverImg.setAttribute('loading', 'lazy');
                        coverImg.setAttribute('decoding', 'async');

                        const infoDiv = document.createElement('div');
                        infoDiv.classList.add('song-info');

                        const songNameElement = document.createElement('h3');
                        songNameElement.textContent = `P${cid_date.page.toString()}: ${cid_date.part.toString()} (${title})`;
                        songNameElement.classList.add('song-name');

                        const artistNamesElement = document.createElement('p');
                        artistNamesElement.textContent = video_date.auther;
                        artistNamesElement.classList.add('song-artist');

                        infoDiv.appendChild(songNameElement);
                        infoDiv.appendChild(artistNamesElement);

                        li.appendChild(coverImg);
                        li.appendChild(infoDiv);

                        li.addEventListener('click', () => playVideo(video_date.bvid, video_date.auther, video_date.title, video_date ,cid_date));

                        resultsBilibiliPElement.appendChild(li);
                    })

                } else {
                    _alert('解析中...')
                    if (bilibili_dash.checked) {
                        fetch(`https://xc.null.red:8043/api/bilibili/video/url?bvid=${bvid}&type=302&title=${title}&author=${author}&dash=true&_=${Date.now()}`) // &dash=true
                            .then(response => response.json())
                            .then(data => {
                                if (data.videoUrl !== null && data.audioUrl !== null) { // (data.videoUrl !== null && data.audioUrl !== null)
                                    let media_json = {
                                        "s": `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`, // `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`
                                        "d": data.length / 1000,
                                        "c": data.pic.substring(4),
                                        "n": title,
                                        "r": author,
                                        "o": `s://www.bilibili.com/video/${bvid}`,
                                        "b": "!3"
                                    }

                                    socket.send('&1' + JSON.stringify(media_json))
                                    if (!send_media_card.checked) {
                                        let media_time = data.length / 1000
                                        let minutes = Math.floor(media_time / 60);
                                        let seconds = Math.floor(media_time) % 60;
                                        let time_format = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                                        getImageAverageColor(data.pic, function(averageColor) {
                                            let mValue = `m__4*3>${escapeHTML(title)}>${escapeHTML(author)}>${data.pic}>${averageColor}>>${data.quality}>>${time_format}`;
                                            let card_json = {
                                                "m": mValue,
                                                "mc": averageColor,
                                                "i": Math.random().toString().slice(2, 14)
                                            };
                                            socket.send(JSON.stringify(card_json))
                                        });
                                    }

                                    _alert(`视频 ${title} 解析成功！`)
                                } else {
                                    _alert(`视频 ${title} 解析失败！请稍后再试`)
                                }
                            })
                    } else {
                        fetch(`https://xc.null.red:8043/api/bilibili/video/url?bvid=${bvid}&type=302&title=${title}&author=${author}&_=${Date.now()}`) // &dash=true
                            .then(response => response.json())
                            .then(data => {
                                if (data.url !== null) { // (data.videoUrl !== null && data.audioUrl !== null)
                                    let media_json = {
                                        "s": data.url.substring(4), // `${data.videoUrl.substring(4)}#audio=${data.audioUrl}`
                                        "d": data.length / 1000,
                                        "c": data.pic.substring(4),
                                        "n": title,
                                        "r": author,
                                        "o": `s://www.bilibili.com/video/${bvid}`,
                                        "b": "!3"
                                    }

                                    socket.send('&1' + JSON.stringify(media_json))
                                    if (!send_media_card.checked) {
                                        let media_time = data.length / 1000
                                        let minutes = Math.floor(media_time / 60);
                                        let seconds = Math.floor(media_time) % 60;
                                        let time_format = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                                        getImageAverageColor(data.pic, function(averageColor) {
                                            let mValue = `m__4*3>${escapeHTML(title)}>${escapeHTML(author)}>${data.pic}>${averageColor}>>${data.quality}>>${time_format}`;
                                            let card_json = {
                                                "m": mValue,
                                                "mc": averageColor,
                                                "i": Math.random().toString().slice(2, 14)
                                            };
                                            socket.send(JSON.stringify(card_json))
                                        });
                                    }

                                    _alert(`视频 ${title} 解析成功！`)
                                } else {
                                    _alert(`视频 ${title} 解析失败！请稍后再试`)
                                }
                            })
                    }
                }
            })
    }

    function dragElement(elmnt) {
        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        if (document.querySelector(".header")) {
            // 对于桌面端
            document.querySelector(".header").onmousedown = dragMouseDown;
            // 对于移动端
            document.querySelector(".header").ontouchstart = dragMouseDown;
        } else {
            // 对于桌面端
            elmnt.onmousedown = dragMouseDown;
            // 对于移动端
            elmnt.ontouchstart = dragMouseDown;
        }

        function dragMouseDown(e) {
            e.stopPropagation();
            e.preventDefault();

            if (e.type === "touchstart") {
                // 移动端触摸开始
                pos3 = e.touches[0].clientX;
                pos4 = e.touches[0].clientY;
            } else {
                // 桌面端鼠标按下
                pos3 = e.clientX;
                pos4 = e.clientY;
            }

            document.onmouseup = closeDragElement;
            document.ontouchend = closeDragElement; // 移动端触摸结束

            document.onmousemove = elementDrag;
            document.ontouchmove = elementDrag; // 移动端触摸移动
        }

        function elementDrag(e) {
            e.stopPropagation();
            e.preventDefault();
            if (e.type === "touchmove") {
                // 移动端触摸移动
                pos1 = pos3 - e.touches[0].clientX;
                pos2 = pos4 - e.touches[0].clientY;
                pos3 = e.touches[0].clientX;
                pos4 = e.touches[0].clientY;
            } else {
                // 桌面端鼠标移动
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
            }
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        }

        function closeDragElement() {
            // 停止移动时取消事件绑定
            document.onmouseup = null;
            document.ontouchend = null;
            document.onmousemove = null;
            document.ontouchmove = null;
        }
    }

    // 配置文件
    document.querySelectorAll('input[name="lryType"]').forEach((radio) => {
        radio.addEventListener('change', function() {
            if (this.checked) {
                localStorage.setItem('xc-lryType', this.value);
            }
        });
    });

    document.getElementById('media_card').addEventListener('change', function() {
        localStorage.setItem('xc-media_card', this.checked);
    });

    document.getElementById('bilibili_dash').addEventListener('change', function() {
        localStorage.setItem('xc-bilibili_dash', this.checked);
    });

    document.getElementById('image_average_color').addEventListener('change', function() {
        localStorage.setItem('xc-image_average_color', this.checked);
    });

    document.getElementById('syncNeteaseFavorites').addEventListener('change', function() {
        localStorage.setItem('xc-syncNeteaseFavorites', this.checked);
        if (this.checked) syncToBS()
    });

    document.getElementById('syncQQFavorites').addEventListener('change', function() {
        localStorage.setItem('xc-syncQQFavorites', this.checked);
        if (this.checked) syncToBS()
    });

    var lazy_status = false;
    // 懒加载
    const xcwindow = document.getElementById('XcToolsWindow');
    xcwindow.addEventListener('scroll', () => {
        if (lazy_status) return;
        lazy_status = true
        setTimeout(() => {
            lazy_status = false
        }, 500)

        if (document.getElementById('qq-div').style.display === 'block' && document.getElementById('songQQSearch').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (qq_search_status) searchQQSongs(search_qq_key, qq_offset += 1);
                }
            }, 500);
        }

        if (document.getElementById('songTabSongList').style.display === 'block' && document.getElementById('search').style.display === 'block' && document.getElementById('netease-div').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (search_song_list) searchSongList(search_song_key, song_list_offset + 1);
                }
            }, 500);
        }

        if (document.getElementById('songTabAlbum').style.display === 'block' && document.getElementById('songAlbum').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (search_album_key !== null) searchAlbum(search_album_key, search_album_offset += 1);
                }
            }, 500);
        }

        if (document.getElementById('songTabRadio').style.display === 'block' && document.getElementById('songRadio').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (search_radio_key !== null) searchRadio(search_radio, search_radio_offset += 1);
                }
            }, 500);
        }

        if (document.getElementById('songTabArtist').style.display === 'block' && document.getElementById('songArtist').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (search_artist_key !== null) searchArtist(search_artist_key, search_artist_offset += 1);
                }
            }, 500);
        }

        if (document.getElementById('bilibili-div').style.display === 'block' && document.getElementById('biliListVideo').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 500) {
                    if (video_search_key !== null) searchVideos(video_search_key, video_num + 1)
                }
            }, 500);
        }

        if (document.getElementById('search').style.display === 'block' && document.getElementById('bilibili-div').style.display === 'none') {
            if (search_key === undefined) return;
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 1500) {
                    if (search_data_status && search_key !== null) searchSongs(search_key, song_list_offset += 1);
                }
            }, 500);
        } else if (document.getElementById('top').style.display === 'block' && document.getElementById('netease-div').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 1500) {
                    if (top_data_status) displayTop();
                }
            }, 500);
        } else if (document.getElementById('QQtop').style.display === 'block' && document.getElementById('qq-div').style.display === 'block') {
            setTimeout(() => {
                if (xcwindow.scrollTop >= xcwindow.scrollHeight - 1500) {
                    if (qqtop_data_status) displayQQTop();
                }
            }, 500);
        }
    });

    displayTop();
    displayQQTop();


    function proxyFunction(targetFunction, callback) {
        return ((...param) => {
            if (callback(param, targetFunction) !== true)
                return targetFunction(...param)
        });
    }

    socket._send = proxyFunction(socket._send.bind(socket), (p) => {
        try {
            p[0].text().then(function(result) {
                try {
                    const msgJson = JSON.parse(result);
                    if ("g" in msgJson) return
                    if ("m" in msgJson) {
                        if (["停", "stop", "停止"].includes(msgJson.m.toLowerCase())) {
                            if (songListStatus['play']) {
                                songListStatus['stop'] = true;
                            }
                        }
                    }
                } catch (_) {}
            })
        } catch (_) {}
    })

    socket._onmessage = proxyFunction(socket._onmessage.bind(socket), (p) => {
        const msg_list = p[0].split('<');
        msg_list.forEach(msg => {
            // if (msg.startsWith('%')) BSHeart();
            msg = msg.split('>')
            if (msg.length === 10) {
                const media_url = msg[0].split(' ')
                if (media_url.length === 2) {
                    if (localStorage.getItem('xc-historyPlays') !== null) {
                        historyPlays = JSON.parse(localStorage.getItem('xc-historyPlays'))
                    } else {
                        historyPlays = []
                    }

                    let userPic

                    if (msg[7].startsWith('http')) {
                        userPic = msg[7]
                    } else {
                        userPic =
                            msg[7].endsWith('.png')
                                ? 'https://static.codemao.cn/rose/v0/images/icon/' + msg[7]
                                : 'https://static.codemao.cn/rose/v0/images/icon/' + msg[7] + '.jpg';
                    }
                    const song_id = extractSongId(media_url[1])
                    if (song_id !== null) {
                        const song_json = {
                            "name": unescapeHTML(msg[2]),
                            "author": unescapeHTML(msg[3].substring(2)),
                            "play": unescapeHTML(msg[4]),
                            "pic": 'http' + msg[6],
                            "play_pic": userPic,
                            "id": song_id,
                            "type": "@0"
                        }
                        historyPlays.unshift(song_json)
                        localStorage.setItem('xc-historyPlays', JSON.stringify(historyPlays));
                        displayFavorite();
                    } else {
                        const qq_song_id = extractQQSongId(media_url[1])
                        if (qq_song_id !== null) {
                            const song_json = {
                                "name": unescapeHTML(msg[2]),
                                "author": unescapeHTML(msg[3].substring(2)),
                                "play": unescapeHTML(msg[4]),
                                "pic": 'http' + msg[6],
                                "play_pic": userPic,
                                "id": qq_song_id,
                                "type": "@2"
                            }
                            historyPlays.unshift(song_json)
                            localStorage.setItem('xc-historyPlays', JSON.stringify(historyPlays));
                            displayFavorite();
                        } else {
                            const bvid = extractBV(media_url[1])
                            if (bvid !== null) {
                                const song_json = {
                                    "name": unescapeHTML(msg[2]),
                                    "author": unescapeHTML(msg[3].substring(2)),
                                    "play": unescapeHTML(msg[4]),
                                    "pic": 'http' + msg[6],
                                    "play_pic": userPic,
                                    "id": bvid,
                                    "type": "!3"
                                }
                                historyPlays.unshift(song_json)
                                localStorage.setItem('xc-historyPlays', JSON.stringify(historyPlays));
                                displayFavorite();
                            }
                        }
                    }
                }
            }
        })
    });

    const tabs = document.getElementsByClassName('tablinks');

    for (let i = 0; i < tabs.length; i++) {
        addEvent(tabs[i], 'click', openTab);

        if(i === 0) {
            tabs[i].setAttribute('data-tabname', 'search');
        } else if(i === 2) {
            tabs[i].setAttribute('data-tabname', 'favorites');
        } else if (i === 1) {
            tabs[i].setAttribute('data-tabname', 'top');
        }
    }

    if(tabs.length > 0) {
        tabs[0].click();
    }

    const qqtab = document.getElementsByClassName('qqtablinks');

    for (let i = 0; i < qqtab.length; i++) {
        addEvent(qqtab[i], 'click', openQQTab);

        if(i === 0) {
            qqtab[i].setAttribute('data-tabname', 'songQQSearch');
        } else if(i === 1) {
            qqtab[i].setAttribute('data-tabname', 'QQtop');
        } else if(i === 2) {
            qqtab[i].setAttribute('data-tabname', 'QQfavorites');
        }
    }

    if(qqtab.length > 0) {
        qqtab[0].click();
    }

    const taba = document.getElementsByClassName('tabalinks');

    for (let i = 0; i < taba.length; i++) {
        addEvent(taba[i], 'click', openTabType);

        if(i === 0) {
            taba[i].setAttribute('data-tabname', 'netease-div');
        } else if(i === 1) {
            taba[i].setAttribute('data-tabname', 'qq-div');
        } else if(i === 2) {
            taba[i].setAttribute('data-tabname', 'bilibili-div');
        } else if(i === 3) {
            taba[i].setAttribute('data-tabname', 'listMedia-div');
        } else if(i === 4) {
            taba[i].setAttribute('data-tabname', 'qrCode-div');
        }
    }

    if(taba.length > 0) {
        taba[0].click();
    }

    const songTab = document.getElementsByClassName('songtablinks');

    for (let i = 0; i < songTab.length; i++) {
        addEvent(songTab[i], 'click', openSongTab);

        if(i === 0) {
            songTab[i].setAttribute('data-tabname', 'songTabSong');
        } else if(i === 1) {
            songTab[i].setAttribute('data-tabname', 'songTabSongList');
        } else if(i === 2) {
            songTab[i].setAttribute('data-tabname', 'songTabAlbum');
        } else if(i === 3) {
            songTab[i].setAttribute('data-tabname', 'songTabRadio');
        } else if(i === 4) {
            songTab[i].setAttribute('data-tabname', 'songTabArtist');
        }
    }

    if(songTab.length > 0) {
        songTab[0].click();
    }

    toggleWindow();
    toggleWindow();
})();
